<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/.gitignore">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.gitignore" />
              <option name="originalContent" value="volume-data/&#10;volume-data/&#10;volume-data/&#10;" />
              <option name="updatedContent" value="# Volume data directories&#10;volume-data/&#10;&#10;# Jenkins data and configuration&#10;jenkins-data/&#10;&#10;# Docker volumes and containers&#10;docker-volumes/&#10;.docker/&#10;&#10;# AWS and Terraform sensitive files&#10;*.tfstate&#10;*.tfstate.*&#10;*.tfvars&#10;.terraform/&#10;.terraform.lock.hcl&#10;terraform.tfstate.backup&#10;crash.log&#10;crash.*.log&#10;&#10;# AWS credentials and config&#10;.aws/&#10;aws-credentials&#10;*.pem&#10;*.key&#10;&#10;# Environment variables and secrets&#10;.env&#10;.env.local&#10;.env.production&#10;.env.staging&#10;*.secrets&#10;secrets.yml&#10;secrets.yaml&#10;&#10;# IDE and editor files&#10;.vscode/&#10;.idea/&#10;*.iml&#10;*.iws&#10;*.ipr&#10;.settings/&#10;.project&#10;.classpath&#10;&#10;# OS generated files&#10;.DS_Store&#10;.DS_Store?&#10;._*&#10;.Spotlight-V100&#10;.Trashes&#10;ehthumbs.db&#10;Thumbs.db&#10;&#10;# Logs&#10;logs/&#10;*.log&#10;npm-debug.log*&#10;yarn-debug.log*&#10;yarn-error.log*&#10;&#10;# Runtime data&#10;pids&#10;*.pid&#10;*.seed&#10;*.pid.lock&#10;&#10;# Temporary files&#10;*.tmp&#10;*.temp&#10;temp/&#10;tmp/&#10;&#10;# Backup files&#10;*.bak&#10;*.backup&#10;*~" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Jenkinsfile">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Jenkinsfile" />
              <option name="originalContent" value="pipeline {&#10;    agent none&#10;    environment {&#10;        DOCKER_CONFIG = '/tmp/.docker'&#10;        AWS_REGION = 'us-east-1'&#10;        ECR_REGISTRY = '442042522885.dkr.ecr.us-east-1.amazonaws.com'&#10;        registryCreds = 'ecr:us-east-1:awscreds'&#10;    }&#10;&#10;    stages {&#10;        stage('Docker Test') {&#10;            agent {&#10;                docker {&#10;                    image 'docker:latest'&#10;                    args '-v /var/run/docker.sock:/var/run/docker.sock'&#10;                }&#10;            }&#10;            steps {&#10;                sh 'docker ps'&#10;            }&#10;        }&#10;&#10;        stage('Build and Test Java Services') {&#10;            parallel {&#10;                stage('API Gateway') {&#10;                    agent {&#10;                        docker {&#10;                            image 'maven:3.8.4-openjdk-17'&#10;                            args '-v /var/run/docker.sock:/var/run/docker.sock'&#10;                        }&#10;                    }&#10;                    steps {&#10;                        dir('apigateway') {&#10;                            sh 'mvn clean test package -DskipTests'&#10;                        }&#10;                    }&#10;                }&#10;                stage('Booking Service') {&#10;                    agent {&#10;                        docker {&#10;                            image 'maven:3.8.4-openjdk-17'&#10;                            args '-v /var/run/docker.sock:/var/run/docker.sock'&#10;                        }&#10;                    }&#10;                    steps {&#10;                        dir('bookingservice') {&#10;                            sh 'mvn clean test package -DskipTests'&#10;                        }&#10;                    }&#10;                }&#10;                stage('Inventory Service') {&#10;                    agent {&#10;                        docker {&#10;                            image 'maven:3.8.4-openjdk-17'&#10;                            args '-v /var/run/docker.sock:/var/run/docker.sock'&#10;                        }&#10;                    }&#10;                    steps {&#10;                        dir('inventoryservice') {&#10;                            sh 'mvn clean test package -DskipTests'&#10;                        }&#10;                    }&#10;                }&#10;                stage('Order Service') {&#10;                    agent {&#10;                        docker {&#10;                            image 'maven:3.8.4-openjdk-17'&#10;                            args '-v /var/run/docker.sock:/var/run/docker.sock'&#10;                        }&#10;                    }&#10;                    steps {&#10;                        dir('orderservice') {&#10;                            sh 'mvn clean test package -DskipTests'&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        stage('Build Docker Images') {&#10;            parallel {&#10;                stage('Build API Gateway Image') {&#10;                    agent {&#10;                        docker {&#10;                            image 'docker:latest'&#10;                            args '-v /var/run/docker.sock:/var/run/docker.sock'&#10;                        }&#10;                    }&#10;                    steps {&#10;                        script {&#10;                            sh 'mkdir -p /tmp/.docker'&#10;                            def apigatewayImage = docker.build(&quot;${ECR_REGISTRY}/apigateway:$BUILD_NUMBER&quot;, &quot;./apigateway&quot;)&#10;                            env.APIGATEWAY_IMAGE = &quot;${ECR_REGISTRY}/apigateway:$BUILD_NUMBER&quot;&#10;                        }&#10;                    }&#10;                }&#10;                stage('Build Booking Service Image') {&#10;                    agent {&#10;                        docker {&#10;                            image 'docker:latest'&#10;                            args '-v /var/run/docker.sock:/var/run/docker.sock'&#10;                        }&#10;                    }&#10;                    steps {&#10;                        script {&#10;                            sh 'mkdir -p /tmp/.docker'&#10;                            def bookingImage = docker.build(&quot;${ECR_REGISTRY}/bookingservice:$BUILD_NUMBER&quot;, &quot;./bookingservice&quot;)&#10;                            env.BOOKING_IMAGE = &quot;${ECR_REGISTRY}/bookingservice:$BUILD_NUMBER&quot;&#10;                        }&#10;                    }&#10;                }&#10;                stage('Build Inventory Service Image') {&#10;                    agent {&#10;                        docker {&#10;                            image 'docker:latest'&#10;                            args '-v /var/run/docker.sock:/var/run/docker.sock'&#10;                        }&#10;                    }&#10;                    steps {&#10;                        script {&#10;                            sh 'mkdir -p /tmp/.docker'&#10;                            def inventoryImage = docker.build(&quot;${ECR_REGISTRY}/inventoryservice:$BUILD_NUMBER&quot;, &quot;./inventoryservice&quot;)&#10;                            env.INVENTORY_IMAGE = &quot;${ECR_REGISTRY}/inventoryservice:$BUILD_NUMBER&quot;&#10;                        }&#10;                    }&#10;                }&#10;                stage('Build Order Service Image') {&#10;                    agent {&#10;                        docker {&#10;                            image 'docker:latest'&#10;                            args '-v /var/run/docker.sock:/var/run/docker.sock'&#10;                        }&#10;                    }&#10;                    steps {&#10;                        script {&#10;                            sh 'mkdir -p /tmp/.docker'&#10;                            def orderImage = docker.build(&quot;${ECR_REGISTRY}/orderservice:$BUILD_NUMBER&quot;, &quot;./orderservice&quot;)&#10;                            env.ORDER_IMAGE = &quot;${ECR_REGISTRY}/orderservice:$BUILD_NUMBER&quot;&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        stage('Push Docker Images to ECR') {&#10;            agent {&#10;                docker {&#10;                    image 'docker:latest'&#10;                    args '-v /var/run/docker.sock:/var/run/docker.sock'&#10;                }&#10;            }&#10;            steps {&#10;                script {&#10;                    docker.withRegistry(&quot;https://${ECR_REGISTRY}&quot;, registryCreds) {&#10;                        // Push all service images&#10;                        docker.image(&quot;${ECR_REGISTRY}/apigateway:$BUILD_NUMBER&quot;).push(&quot;$BUILD_NUMBER&quot;)&#10;                        docker.image(&quot;${ECR_REGISTRY}/apigateway:$BUILD_NUMBER&quot;).push('latest')&#10;&#10;                        docker.image(&quot;${ECR_REGISTRY}/bookingservice:$BUILD_NUMBER&quot;).push(&quot;$BUILD_NUMBER&quot;)&#10;                        docker.image(&quot;${ECR_REGISTRY}/bookingservice:$BUILD_NUMBER&quot;).push('latest')&#10;&#10;                        docker.image(&quot;${ECR_REGISTRY}/inventoryservice:$BUILD_NUMBER&quot;).push(&quot;$BUILD_NUMBER&quot;)&#10;                        docker.image(&quot;${ECR_REGISTRY}/inventoryservice:$BUILD_NUMBER&quot;).push('latest')&#10;&#10;                        docker.image(&quot;${ECR_REGISTRY}/orderservice:$BUILD_NUMBER&quot;).push(&quot;$BUILD_NUMBER&quot;)&#10;                        docker.image(&quot;${ECR_REGISTRY}/orderservice:$BUILD_NUMBER&quot;).push('latest')&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="pipeline {&#10;    agent any&#10;    environment {&#10;        DOCKER_CONFIG = '/tmp/.docker'&#10;        AWS_REGION = 'us-east-1'&#10;        ECR_REGISTRY = '442042522885.dkr.ecr.us-east-1.amazonaws.com'&#10;        registryCreds = 'ecr:us-east-1:awscreds'&#10;    }&#10;&#10;    stages {&#10;        stage('Docker Test') {&#10;            steps {&#10;                script {&#10;                    sh 'docker --version'&#10;                    sh 'docker ps'&#10;                }&#10;            }&#10;        }&#10;&#10;        stage('Build and Test Java Services') {&#10;            parallel {&#10;                stage('API Gateway') {&#10;                    steps {&#10;                        dir('apigateway') {&#10;                            sh 'chmod +x mvnw'&#10;                            sh './mvnw clean package -DskipTests'&#10;                        }&#10;                    }&#10;                }&#10;                stage('Booking Service') {&#10;                    steps {&#10;                        dir('bookingservice') {&#10;                            sh 'chmod +x mvnw'&#10;                            sh './mvnw clean package -DskipTests'&#10;                        }&#10;                    }&#10;                }&#10;                stage('Inventory Service') {&#10;                    steps {&#10;                        dir('inventoryservice') {&#10;                            sh 'chmod +x mvnw'&#10;                            sh './mvnw clean package -DskipTests'&#10;                        }&#10;                    }&#10;                }&#10;                stage('Order Service') {&#10;                    steps {&#10;                        dir('orderservice') {&#10;                            sh 'chmod +x mvnw'&#10;                            sh './mvnw clean package -DskipTests'&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        stage('Build Docker Images') {&#10;            parallel {&#10;                stage('Build API Gateway Image') {&#10;                    steps {&#10;                        script {&#10;                            sh 'mkdir -p /tmp/.docker'&#10;                            sh &quot;docker build -t ${ECR_REGISTRY}/apigateway:${BUILD_NUMBER} ./apigateway&quot;&#10;                            sh &quot;docker tag ${ECR_REGISTRY}/apigateway:${BUILD_NUMBER} ${ECR_REGISTRY}/apigateway:latest&quot;&#10;                        }&#10;                    }&#10;                }&#10;                stage('Build Booking Service Image') {&#10;                    steps {&#10;                        script {&#10;                            sh 'mkdir -p /tmp/.docker'&#10;                            sh &quot;docker build -t ${ECR_REGISTRY}/bookingservice:${BUILD_NUMBER} ./bookingservice&quot;&#10;                            sh &quot;docker tag ${ECR_REGISTRY}/bookingservice:${BUILD_NUMBER} ${ECR_REGISTRY}/bookingservice:latest&quot;&#10;                        }&#10;                    }&#10;                }&#10;                stage('Build Inventory Service Image') {&#10;                    steps {&#10;                        script {&#10;                            sh 'mkdir -p /tmp/.docker'&#10;                            sh &quot;docker build -t ${ECR_REGISTRY}/inventoryservice:${BUILD_NUMBER} ./inventoryservice&quot;&#10;                            sh &quot;docker tag ${ECR_REGISTRY}/inventoryservice:${BUILD_NUMBER} ${ECR_REGISTRY}/inventoryservice:latest&quot;&#10;                        }&#10;                    }&#10;                }&#10;                stage('Build Order Service Image') {&#10;                    steps {&#10;                        script {&#10;                            sh 'mkdir -p /tmp/.docker'&#10;                            sh &quot;docker build -t ${ECR_REGISTRY}/orderservice:${BUILD_NUMBER} ./orderservice&quot;&#10;                            sh &quot;docker tag ${ECR_REGISTRY}/orderservice:${BUILD_NUMBER} ${ECR_REGISTRY}/orderservice:latest&quot;&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        stage('Push Docker Images to ECR') {&#10;            steps {&#10;                script {&#10;                    // Login to ECR&#10;                    sh &quot;aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REGISTRY}&quot;&#10;                    &#10;                    // Push all images&#10;                    sh &quot;docker push ${ECR_REGISTRY}/apigateway:${BUILD_NUMBER}&quot;&#10;                    sh &quot;docker push ${ECR_REGISTRY}/apigateway:latest&quot;&#10;                    &#10;                    sh &quot;docker push ${ECR_REGISTRY}/bookingservice:${BUILD_NUMBER}&quot;&#10;                    sh &quot;docker push ${ECR_REGISTRY}/bookingservice:latest&quot;&#10;                    &#10;                    sh &quot;docker push ${ECR_REGISTRY}/inventoryservice:${BUILD_NUMBER}&quot;&#10;                    sh &quot;docker push ${ECR_REGISTRY}/inventoryservice:latest&quot;&#10;                    &#10;                    sh &quot;docker push ${ECR_REGISTRY}/orderservice:${BUILD_NUMBER}&quot;&#10;                    sh &quot;docker push ${ECR_REGISTRY}/orderservice:latest&quot;&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/apigateway/Dockerfile">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/apigateway/Dockerfile" />
              <option name="updatedContent" value="FROM openjdk:17-jdk-slim&#10;&#10;WORKDIR /app&#10;&#10;# Copy the JAR file&#10;COPY target/apigateway-*.jar app.jar&#10;&#10;# Expose the port your application runs on&#10;EXPOSE 8080&#10;&#10;# Run the application&#10;ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;app.jar&quot;]" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/bookingservice/Dockerfile">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/bookingservice/Dockerfile" />
              <option name="updatedContent" value="FROM openjdk:17-jdk-slim&#10;&#10;WORKDIR /app&#10;&#10;# Copy the JAR file&#10;COPY target/bookingservice-*.jar app.jar&#10;&#10;# Expose the port your application runs on&#10;EXPOSE 8081&#10;&#10;# Run the application&#10;ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;app.jar&quot;]" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docker-compose.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docker-compose.yml" />
              <option name="originalContent" value="services:&#10;  mysql:&#10;    image: mysql:8.0.39&#10;    container_name: mysql&#10;    restart: always&#10;    environment:&#10;      MYSQL_ROOT_PASSWORD:&#10;      MYSQL_DATABASE: ticketing&#10;    ports:&#10;      - &quot;3306:3306&quot;&#10;    volumes:&#10;      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql&#10;      - db-data:/var/lib/mysql&#10;      - db-data:/var/log/mysql&#10;&#10;&#10;&#10;  zookeeper:&#10;    image: confluentinc/cp-zookeeper:7.5.0&#10;    hostname: zookeeper&#10;    container_name: zookeeper&#10;    ports:&#10;      - &quot;2181:2181&quot;&#10;    environment:&#10;      ZOOKEEPER_CLIENT_PORT: 2181&#10;      ZOOKEEPER_TICK_TIME: 3000&#10;&#10;  kafka-broker:&#10;    image: confluentinc/cp-kafka:7.5.0&#10;    container_name: kafka-broker&#10;    ports:&#10;      - &quot;9092:9092&quot;&#10;      - &quot;29092:29092&quot;&#10;    depends_on:&#10;      - zookeeper&#10;    environment:&#10;      KAFKA_BROKER_ID: 1&#10;      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'&#10;      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT&#10;      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:29092,PLAINTEXT_HOST://localhost:9092&#10;      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1&#10;      auto.create.topics.enable: 'true'&#10;&#10;  kafka-ui:&#10;    container_name: kafka-ui&#10;    image: provectuslabs/kafka-ui:latest&#10;    ports:&#10;      - &quot;8084:8080&quot;&#10;    depends_on:&#10;      - kafka-broker&#10;    environment:&#10;      KAFKA_CLUSTERS_NAME: local&#10;      KAFKA_CLUSTERS_BOOTSTRAPSERVERS: kafka-broker:29092&#10;      DYNAMIC_CONFIG_ENABLED: 'true'&#10;&#10;  kafka-schema-registry:&#10;    image: confluentinc/cp-schema-registry:7.5.0&#10;    hostname: kafka-schema-registry&#10;    container_name: kafka-schema-registry&#10;    depends_on:&#10;      - kafka-broker&#10;    ports:&#10;      - &quot;8083:8081&quot;&#10;    environment:&#10;      SCHEMA_REGISTRY_HOST_NAME: kafka-schema-registry&#10;      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka-broker:29092'&#10;      SCHEMA_REGISTRY_LISTENERS: http://kafka-schema-registry:8081&#10;&#10;  keycloak-db:&#10;    container_name: keycloak-mysql&#10;    image: mysql:8.3.0&#10;    volumes:&#10;      - ./volume-data/mysql_keycloak_data:/var/lib/mysql&#10;    environment:&#10;      MYSQL_ROOT_PASSWORD: root&#10;      MYSQL_DATABASE: keycloak&#10;      MYSQL_USER: keycloak&#10;      MYSQL_PASSWORD:  # make sure to add your password&#10;&#10;  keycloak:&#10;    container_name: keycloak&#10;    image: quay.io/keycloak/keycloak:24.0.1&#10;    command: [ &quot;start-dev&quot;, &quot;--import-realm&quot; ]&#10;    environment:&#10;      DB_VENDOR: MYSQL&#10;      DB_ADDR: mysql&#10;      DB_DATABASE: keycloak&#10;      DB_USER: keycloak&#10;      DB_PASSWORD: password&#10;      KEYCLOAK_ADMIN: admin&#10;      KEYCLOAK_ADMIN_PASSWORD: admin&#10;    ports:&#10;      - &quot;8091:8080&quot;&#10;    volumes:&#10;      - ./docker/keycloak/realms/:/opt/keycloak/data/import/&#10;    depends_on:&#10;      - keycloak-db&#10;&#10;  jenkins:&#10;    container_name: jenkins&#10;    build:&#10;      context: .&#10;      dockerfile: jenkins.Dockerfile&#10;    restart: always&#10;    ports:&#10;      - &quot;8081:8080&quot;&#10;      - &quot;50000:50000&quot;&#10;    volumes:&#10;      - jenkins-data:/var/jenkins_home&#10;      - /var/run/docker.sock:/var/run/docker.sock&#10;      - ./:/workspace&#10;    environment:&#10;    command: &gt;&#10;      bash -c &quot;&#10;        apt-get update &amp;&amp;&#10;        apt-get install -y docker.io awscli maven &amp;&amp;&#10;        usermod -aG docker jenkins &amp;&amp;&#10;        /usr/local/bin/jenkins.sh&#10;      &quot;&#10;      - DOCKER_HOST=unix:///var/run/docker.sock&#10;&#10;volumes:&#10;  db-data:&#10;  jenkins-data:&#10;  docker-certs-ca:&#10;  docker-certs-client:&#10;" />
              <option name="updatedContent" value="services:&#10;  mysql:&#10;    image: mysql:8.0.39&#10;    container_name: mysql&#10;    restart: always&#10;    environment:&#10;      MYSQL_ROOT_PASSWORD:&#10;      MYSQL_DATABASE: ticketing&#10;    ports:&#10;      - &quot;3306:3306&quot;&#10;    volumes:&#10;      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql&#10;      - db-data:/var/lib/mysql&#10;      - db-data:/var/log/mysql&#10;&#10;&#10;&#10;  zookeeper:&#10;    image: confluentinc/cp-zookeeper:7.5.0&#10;    hostname: zookeeper&#10;    container_name: zookeeper&#10;    ports:&#10;      - &quot;2181:2181&quot;&#10;    environment:&#10;      ZOOKEEPER_CLIENT_PORT: 2181&#10;      ZOOKEEPER_TICK_TIME: 3000&#10;&#10;  kafka-broker:&#10;    image: confluentinc/cp-kafka:7.5.0&#10;    container_name: kafka-broker&#10;    ports:&#10;      - &quot;9092:9092&quot;&#10;      - &quot;29092:29092&quot;&#10;    depends_on:&#10;      - zookeeper&#10;    environment:&#10;      KAFKA_BROKER_ID: 1&#10;      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'&#10;      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT&#10;      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:29092,PLAINTEXT_HOST://localhost:9092&#10;      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1&#10;      auto.create.topics.enable: 'true'&#10;&#10;  kafka-ui:&#10;    container_name: kafka-ui&#10;    image: provectuslabs/kafka-ui:latest&#10;    ports:&#10;      - &quot;8084:8080&quot;&#10;    depends_on:&#10;      - kafka-broker&#10;    environment:&#10;      KAFKA_CLUSTERS_NAME: local&#10;      KAFKA_CLUSTERS_BOOTSTRAPSERVERS: kafka-broker:29092&#10;      DYNAMIC_CONFIG_ENABLED: 'true'&#10;&#10;  kafka-schema-registry:&#10;    image: confluentinc/cp-schema-registry:7.5.0&#10;    hostname: kafka-schema-registry&#10;    container_name: kafka-schema-registry&#10;    depends_on:&#10;      - kafka-broker&#10;    ports:&#10;      - &quot;8083:8081&quot;&#10;    environment:&#10;      SCHEMA_REGISTRY_HOST_NAME: kafka-schema-registry&#10;      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka-broker:29092'&#10;      SCHEMA_REGISTRY_LISTENERS: http://kafka-schema-registry:8081&#10;&#10;  keycloak-db:&#10;    container_name: keycloak-mysql&#10;    image: mysql:8.3.0&#10;    volumes:&#10;      - ./volume-data/mysql_keycloak_data:/var/lib/mysql&#10;    environment:&#10;      MYSQL_ROOT_PASSWORD: root&#10;      MYSQL_DATABASE: keycloak&#10;      MYSQL_USER: keycloak&#10;      MYSQL_PASSWORD:  # make sure to add your password&#10;&#10;  keycloak:&#10;    container_name: keycloak&#10;    image: quay.io/keycloak/keycloak:24.0.1&#10;    command: [ &quot;start-dev&quot;, &quot;--import-realm&quot; ]&#10;    environment:&#10;      DB_VENDOR: MYSQL&#10;      DB_ADDR: mysql&#10;      DB_DATABASE: keycloak&#10;      DB_USER: keycloak&#10;      DB_PASSWORD: password&#10;      KEYCLOAK_ADMIN: admin&#10;      KEYCLOAK_ADMIN_PASSWORD: admin&#10;    ports:&#10;      - &quot;8091:8080&quot;&#10;    volumes:&#10;      - ./docker/keycloak/realms/:/opt/keycloak/data/import/&#10;    depends_on:&#10;      - keycloak-db&#10;&#10;  jenkins:&#10;    container_name: jenkins&#10;    build:&#10;      context: .&#10;      dockerfile: jenkins.Dockerfile&#10;    restart: always&#10;    ports:&#10;      - &quot;8081:8080&quot;&#10;      - &quot;50000:50000&quot;&#10;    volumes:&#10;      - jenkins-data:/var/jenkins_home&#10;      - /var/run/docker.sock:/var/run/docker.sock&#10;      - ./:/workspace&#10;    environment:&#10;      - DOCKER_HOST=unix:///var/run/docker.sock&#10;&#10;volumes:&#10;  db-data:&#10;  jenkins-data:" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/inventoryservice/Dockerfile">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/inventoryservice/Dockerfile" />
              <option name="updatedContent" value="FROM openjdk:17-jdk-slim&#10;&#10;WORKDIR /app&#10;&#10;# Copy the JAR file&#10;COPY target/inventoryservice-*.jar app.jar&#10;&#10;# Expose the port your application runs on&#10;EXPOSE 8082&#10;&#10;# Run the application&#10;ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;app.jar&quot;]" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/jenkins.Dockerfile">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/jenkins.Dockerfile" />
              <option name="updatedContent" value="FROM jenkins/jenkins:lts&#10;&#10;USER root&#10;&#10;# Install Docker, AWS CLI, and Maven&#10;RUN apt-get update &amp;&amp; \&#10;    apt-get install -y \&#10;    docker.io \&#10;    awscli \&#10;    maven \&#10;    &amp;&amp; rm -rf /var/lib/apt/lists/*&#10;&#10;# Add jenkins user to docker group&#10;RUN usermod -aG docker jenkins&#10;&#10;USER jenkins" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/orderservice/Dockerfile">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/orderservice/Dockerfile" />
              <option name="updatedContent" value="FROM openjdk:17-jdk-slim&#10;&#10;WORKDIR /app&#10;&#10;# Copy the JAR file&#10;COPY target/orderservice-*.jar app.jar&#10;&#10;# Expose the port your application runs on&#10;EXPOSE 8083&#10;&#10;# Run the application&#10;ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;app.jar&quot;]" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/terraform/main.tf">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/terraform/main.tf" />
              <option name="updatedContent" value="terraform {&#10;  required_providers {&#10;    aws = {&#10;      source  = &quot;hashicorp/aws&quot;&#10;      version = &quot;~&gt; 5.0&quot;&#10;    }&#10;  }&#10;}&#10;&#10;provider &quot;aws&quot; {&#10;  region = var.aws_region&#10;}&#10;&#10;variable &quot;aws_region&quot; {&#10;  description = &quot;AWS region&quot;&#10;  type        = string&#10;  default     = &quot;us-east-1&quot;&#10;}&#10;&#10;variable &quot;environment&quot; {&#10;  description = &quot;Environment name&quot;&#10;  type        = string&#10;  default     = &quot;dev&quot;&#10;}&#10;&#10;variable &quot;vpc_id&quot; {&#10;  description = &quot;VPC ID where ECS will be deployed&quot;&#10;  type        = string&#10;  # You'll need to replace this with your actual VPC ID&#10;  default = &quot;vpc-xxxxxxxxx&quot;&#10;}&#10;&#10;variable &quot;subnet_ids&quot; {&#10;  description = &quot;Subnet IDs where ECS tasks will run&quot;&#10;  type        = list(string)&#10;  # You'll need to replace these with your actual subnet IDs&#10;  default = [&quot;subnet-xxxxxxxxx&quot;, &quot;subnet-yyyyyyyyy&quot;]&#10;}&#10;&#10;# ECR Repositories for each microservice&#10;resource &quot;aws_ecr_repository&quot; &quot;apigateway&quot; {&#10;  name                 = &quot;apigateway&quot;&#10;  image_tag_mutability = &quot;MUTABLE&quot;&#10;&#10;  image_scanning_configuration {&#10;    scan_on_push = true&#10;  }&#10;}&#10;&#10;resource &quot;aws_ecr_repository&quot; &quot;bookingservice&quot; {&#10;  name                 = &quot;bookingservice&quot;&#10;  image_tag_mutability = &quot;MUTABLE&quot;&#10;&#10;  image_scanning_configuration {&#10;    scan_on_push = true&#10;  }&#10;}&#10;&#10;resource &quot;aws_ecr_repository&quot; &quot;inventoryservice&quot; {&#10;  name                 = &quot;inventoryservice&quot;&#10;  image_tag_mutability = &quot;MUTABLE&quot;&#10;&#10;  image_scanning_configuration {&#10;    scan_on_push = true&#10;  }&#10;}&#10;&#10;resource &quot;aws_ecr_repository&quot; &quot;orderservice&quot; {&#10;  name                 = &quot;orderservice&quot;&#10;  image_tag_mutability = &quot;MUTABLE&quot;&#10;&#10;  image_scanning_configuration {&#10;    scan_on_push = true&#10;  }&#10;}&#10;&#10;# ECS Cluster&#10;resource &quot;aws_ecs_cluster&quot; &quot;microservices_cluster&quot; {&#10;  name = &quot;microservices-${var.environment}&quot;&#10;&#10;  configuration {&#10;    execute_command_configuration {&#10;      logging = &quot;OVERRIDE&quot;&#10;      log_configuration {&#10;        cloud_watch_log_group_name = aws_cloudwatch_log_group.ecs_logs.name&#10;      }&#10;    }&#10;  }&#10;}&#10;&#10;# CloudWatch Log Group&#10;resource &quot;aws_cloudwatch_log_group&quot; &quot;ecs_logs&quot; {&#10;  name              = &quot;/ecs/microservices-${var.environment}&quot;&#10;  retention_in_days = 7&#10;}&#10;&#10;# Security Group for ECS tasks&#10;resource &quot;aws_security_group&quot; &quot;ecs_tasks&quot; {&#10;  name        = &quot;ecs-tasks-${var.environment}&quot;&#10;  description = &quot;Security group for ECS tasks&quot;&#10;  vpc_id      = var.vpc_id&#10;&#10;  ingress {&#10;    protocol    = &quot;tcp&quot;&#10;    from_port   = 8080&#10;    to_port     = 8080&#10;    cidr_blocks = [&quot;0.0.0.0/0&quot;]&#10;  }&#10;&#10;  ingress {&#10;    protocol    = &quot;tcp&quot;&#10;    from_port   = 8081&#10;    to_port     = 8081&#10;    cidr_blocks = [&quot;0.0.0.0/0&quot;]&#10;  }&#10;&#10;  ingress {&#10;    protocol    = &quot;tcp&quot;&#10;    from_port   = 8082&#10;    to_port     = 8082&#10;    cidr_blocks = [&quot;0.0.0.0/0&quot;]&#10;  }&#10;&#10;  ingress {&#10;    protocol    = &quot;tcp&quot;&#10;    from_port   = 8083&#10;    to_port     = 8083&#10;    cidr_blocks = [&quot;0.0.0.0/0&quot;]&#10;  }&#10;&#10;  egress {&#10;    protocol    = &quot;-1&quot;&#10;    from_port   = 0&#10;    to_port     = 0&#10;    cidr_blocks = [&quot;0.0.0.0/0&quot;]&#10;  }&#10;}&#10;&#10;# IAM role for ECS tasks&#10;resource &quot;aws_iam_role&quot; &quot;ecs_task_execution_role&quot; {&#10;  name = &quot;ecsTaskExecutionRole-${var.environment}&quot;&#10;&#10;  assume_role_policy = jsonencode({&#10;    Version = &quot;2012-10-17&quot;&#10;    Statement = [&#10;      {&#10;        Action = &quot;sts:AssumeRole&quot;&#10;        Effect = &quot;Allow&quot;&#10;        Principal = {&#10;          Service = &quot;ecs-tasks.amazonaws.com&quot;&#10;        }&#10;      }&#10;    ]&#10;  })&#10;}&#10;&#10;resource &quot;aws_iam_role_policy_attachment&quot; &quot;ecs_task_execution_role_policy&quot; {&#10;  role       = aws_iam_role.ecs_task_execution_role.name&#10;  policy_arn = &quot;arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy&quot;&#10;}&#10;&#10;# Task Definition for API Gateway&#10;resource &quot;aws_ecs_task_definition&quot; &quot;apigateway&quot; {&#10;  family                   = &quot;apigateway-${var.environment}&quot;&#10;  network_mode             = &quot;awsvpc&quot;&#10;  requires_compatibilities = [&quot;FARGATE&quot;]&#10;  cpu                      = &quot;256&quot;&#10;  memory                   = &quot;512&quot;&#10;  execution_role_arn       = aws_iam_role.ecs_task_execution_role.arn&#10;&#10;  container_definitions = jsonencode([&#10;    {&#10;      name      = &quot;apigateway&quot;&#10;      image     = &quot;${aws_ecr_repository.apigateway.repository_url}:latest&quot;&#10;      essential = true&#10;      portMappings = [&#10;        {&#10;          containerPort = 8080&#10;          hostPort      = 8080&#10;          protocol      = &quot;tcp&quot;&#10;        }&#10;      ]&#10;      logConfiguration = {&#10;        logDriver = &quot;awslogs&quot;&#10;        options = {&#10;          &quot;awslogs-group&quot;         = aws_cloudwatch_log_group.ecs_logs.name&#10;          &quot;awslogs-region&quot;        = var.aws_region&#10;          &quot;awslogs-stream-prefix&quot; = &quot;apigateway&quot;&#10;        }&#10;      }&#10;    }&#10;  ])&#10;}&#10;&#10;# Task Definition for Booking Service&#10;resource &quot;aws_ecs_task_definition&quot; &quot;bookingservice&quot; {&#10;  family                   = &quot;bookingservice-${var.environment}&quot;&#10;  network_mode             = &quot;awsvpc&quot;&#10;  requires_compatibilities = [&quot;FARGATE&quot;]&#10;  cpu                      = &quot;256&quot;&#10;  memory                   = &quot;512&quot;&#10;  execution_role_arn       = aws_iam_role.ecs_task_execution_role.arn&#10;&#10;  container_definitions = jsonencode([&#10;    {&#10;      name      = &quot;bookingservice&quot;&#10;      image     = &quot;${aws_ecr_repository.bookingservice.repository_url}:latest&quot;&#10;      essential = true&#10;      portMappings = [&#10;        {&#10;          containerPort = 8081&#10;          hostPort      = 8081&#10;          protocol      = &quot;tcp&quot;&#10;        }&#10;      ]&#10;      logConfiguration = {&#10;        logDriver = &quot;awslogs&quot;&#10;        options = {&#10;          &quot;awslogs-group&quot;         = aws_cloudwatch_log_group.ecs_logs.name&#10;          &quot;awslogs-region&quot;        = var.aws_region&#10;          &quot;awslogs-stream-prefix&quot; = &quot;bookingservice&quot;&#10;        }&#10;      }&#10;    }&#10;  ])&#10;}&#10;&#10;# Task Definition for Inventory Service&#10;resource &quot;aws_ecs_task_definition&quot; &quot;inventoryservice&quot; {&#10;  family                   = &quot;inventoryservice-${var.environment}&quot;&#10;  network_mode             = &quot;awsvpc&quot;&#10;  requires_compatibilities = [&quot;FARGATE&quot;]&#10;  cpu                      = &quot;256&quot;&#10;  memory                   = &quot;512&quot;&#10;  execution_role_arn       = aws_iam_role.ecs_task_execution_role.arn&#10;&#10;  container_definitions = jsonencode([&#10;    {&#10;      name      = &quot;inventoryservice&quot;&#10;      image     = &quot;${aws_ecr_repository.inventoryservice.repository_url}:latest&quot;&#10;      essential = true&#10;      portMappings = [&#10;        {&#10;          containerPort = 8082&#10;          hostPort      = 8082&#10;          protocol      = &quot;tcp&quot;&#10;        }&#10;      ]&#10;      logConfiguration = {&#10;        logDriver = &quot;awslogs&quot;&#10;        options = {&#10;          &quot;awslogs-group&quot;         = aws_cloudwatch_log_group.ecs_logs.name&#10;          &quot;awslogs-region&quot;        = var.aws_region&#10;          &quot;awslogs-stream-prefix&quot; = &quot;inventoryservice&quot;&#10;        }&#10;      }&#10;    }&#10;  ])&#10;}&#10;&#10;# Task Definition for Order Service&#10;resource &quot;aws_ecs_task_definition&quot; &quot;orderservice&quot; {&#10;  family                   = &quot;orderservice-${var.environment}&quot;&#10;  network_mode             = &quot;awsvpc&quot;&#10;  requires_compatibilities = [&quot;FARGATE&quot;]&#10;  cpu                      = &quot;256&quot;&#10;  memory                   = &quot;512&quot;&#10;  execution_role_arn       = aws_iam_role.ecs_task_execution_role.arn&#10;&#10;  container_definitions = jsonencode([&#10;    {&#10;      name      = &quot;orderservice&quot;&#10;      image     = &quot;${aws_ecr_repository.orderservice.repository_url}:latest&quot;&#10;      essential = true&#10;      portMappings = [&#10;        {&#10;          containerPort = 8083&#10;          hostPort      = 8083&#10;          protocol      = &quot;tcp&quot;&#10;        }&#10;      ]&#10;      logConfiguration = {&#10;        logDriver = &quot;awslogs&quot;&#10;        options = {&#10;          &quot;awslogs-group&quot;         = aws_cloudwatch_log_group.ecs_logs.name&#10;          &quot;awslogs-region&quot;        = var.aws_region&#10;          &quot;awslogs-stream-prefix&quot; = &quot;orderservice&quot;&#10;        }&#10;      }&#10;    }&#10;  ])&#10;}&#10;&#10;# ECS Services&#10;resource &quot;aws_ecs_service&quot; &quot;apigateway&quot; {&#10;  name            = &quot;apigateway-svc&quot;&#10;  cluster         = aws_ecs_cluster.microservices_cluster.id&#10;  task_definition = aws_ecs_task_definition.apigateway.arn&#10;  desired_count   = 1&#10;  launch_type     = &quot;FARGATE&quot;&#10;&#10;  network_configuration {&#10;    subnets          = var.subnet_ids&#10;    security_groups  = [aws_security_group.ecs_tasks.id]&#10;    assign_public_ip = true&#10;  }&#10;}&#10;&#10;resource &quot;aws_ecs_service&quot; &quot;bookingservice&quot; {&#10;  name            = &quot;bookingservice-svc&quot;&#10;  cluster         = aws_ecs_cluster.microservices_cluster.id&#10;  task_definition = aws_ecs_task_definition.bookingservice.arn&#10;  desired_count   = 1&#10;  launch_type     = &quot;FARGATE&quot;&#10;&#10;  network_configuration {&#10;    subnets          = var.subnet_ids&#10;    security_groups  = [aws_security_group.ecs_tasks.id]&#10;    assign_public_ip = true&#10;  }&#10;}&#10;&#10;resource &quot;aws_ecs_service&quot; &quot;inventoryservice&quot; {&#10;  name            = &quot;inventoryservice-svc&quot;&#10;  cluster         = aws_ecs_cluster.microservices_cluster.id&#10;  task_definition = aws_ecs_task_definition.inventoryservice.arn&#10;  desired_count   = 1&#10;  launch_type     = &quot;FARGATE&quot;&#10;&#10;  network_configuration {&#10;    subnets          = var.subnet_ids&#10;    security_groups  = [aws_security_group.ecs_tasks.id]&#10;    assign_public_ip = true&#10;  }&#10;}&#10;&#10;resource &quot;aws_ecs_service&quot; &quot;orderservice&quot; {&#10;  name            = &quot;orderservice-svc&quot;&#10;  cluster         = aws_ecs_cluster.microservices_cluster.id&#10;  task_definition = aws_ecs_task_definition.orderservice.arn&#10;  desired_count   = 1&#10;  launch_type     = &quot;FARGATE&quot;&#10;&#10;  network_configuration {&#10;    subnets          = var.subnet_ids&#10;    security_groups  = [aws_security_group.ecs_tasks.id]&#10;    assign_public_ip = true&#10;  }&#10;}&#10;&#10;# Outputs&#10;output &quot;ecr_repositories&quot; {&#10;  description = &quot;ECR repository URLs&quot;&#10;  value = {&#10;    apigateway       = aws_ecr_repository.apigateway.repository_url&#10;    bookingservice   = aws_ecr_repository.bookingservice.repository_url&#10;    inventoryservice = aws_ecr_repository.inventoryservice.repository_url&#10;    orderservice     = aws_ecr_repository.orderservice.repository_url&#10;  }&#10;}&#10;&#10;output &quot;ecs_cluster_name&quot; {&#10;  description = &quot;ECS cluster name&quot;&#10;  value       = aws_ecs_cluster.microservices_cluster.name&#10;}&#10;&#10;output &quot;ecs_cluster_arn&quot; {&#10;  description = &quot;ECS cluster ARN&quot;&#10;  value       = aws_ecs_cluster.microservices_cluster.arn&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>