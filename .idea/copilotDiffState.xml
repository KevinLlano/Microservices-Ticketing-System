<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/.gitignore">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.gitignore" />
              <option name="originalContent" value="# Volume data directories&#10;volume-data/&#10;&#10;# Jenkins data and configuration&#10;jenkins-data/&#10;&#10;# Docker volumes and containers&#10;docker-volumes/&#10;.docker/&#10;&#10;# AWS and Terraform sensitive files&#10;*.tfstate&#10;*.tfstate.*&#10;*.tfvars&#10;.terraform/&#10;.terraform.lock.hcl&#10;terraform.tfstate.backup&#10;crash.log&#10;crash.*.log&#10;&#10;# AWS credentials and config&#10;.aws/&#10;aws-credentials&#10;*.pem&#10;*.key&#10;&#10;# Environment variables and secrets&#10;.env&#10;.env.local&#10;.env.production&#10;.env.staging&#10;*.secrets&#10;secrets.yml&#10;secrets.yaml&#10;&#10;# Database passwords and connection strings&#10;application-*.properties&#10;application-*.yml&#10;database.properties&#10;&#10;# Jenkins and CI/CD secrets&#10;jenkins_home/&#10;.jenkins/&#10;credentials.xml&#10;&#10;# IDE and editor files&#10;.vscode/&#10;.idea/&#10;*.iml&#10;*.iws&#10;*.ipr&#10;.settings/&#10;.project&#10;.classpath&#10;&#10;# OS generated files&#10;.DS_Store&#10;.DS_Store?&#10;._*&#10;.Spotlight-V100&#10;.Trashes&#10;ehthumbs.db&#10;Thumbs.db&#10;&#10;# Compiled class files&#10;*.class&#10;target/&#10;build/&#10;out/&#10;&#10;# Log files&#10;*.log&#10;logs/&#10;npm-debug.log*&#10;yarn-debug.log*&#10;yarn-error.log*&#10;&#10;# Runtime data&#10;pids&#10;*.pid&#10;*.seed&#10;*.pid.lock&#10;&#10;# Temporary files&#10;*.tmp&#10;*.temp&#10;temp/&#10;tmp/&#10;&#10;# Backup files&#10;*.bak&#10;*.backup&#10;*~&#10;" />
              <option name="updatedContent" value="# Volume data directories&#10;volume-data/&#10;&#10;# Jenkins data and configuration&#10;jenkins-data/&#10;&#10;# Docker volumes and containers&#10;docker-volumes/&#10;.docker/&#10;&#10;# AWS and Terraform sensitive files&#10;*.tfstate&#10;*.tfstate.*&#10;*.tfvars&#10;.terraform/&#10;.terraform.lock.hcl&#10;terraform.tfstate.backup&#10;crash.log&#10;crash.*.log&#10;&#10;# AWS credentials and config&#10;.aws/&#10;aws-credentials&#10;*.pem&#10;*.key&#10;&#10;# Environment variables and secrets&#10;.env&#10;.env.local&#10;.env.production&#10;.env.staging&#10;*.secrets&#10;secrets.yml&#10;secrets.yaml&#10;&#10;# Database passwords and connection strings&#10;application-*.properties&#10;application-*.yml&#10;database.properties&#10;&#10;# Jenkins and CI/CD secrets&#10;jenkins_home/&#10;.jenkins/&#10;credentials.xml&#10;&#10;# IDE and editor files&#10;.vscode/&#10;.idea/&#10;*.iml&#10;*.iws&#10;*.ipr&#10;.settings/&#10;.project&#10;.classpath&#10;&#10;# OS generated files&#10;.DS_Store&#10;.DS_Store?&#10;._*&#10;.Spotlight-V100&#10;.Trashes&#10;ehthumbs.db&#10;Thumbs.db&#10;&#10;# Compiled class files&#10;*.class&#10;target/&#10;build/&#10;out/&#10;&#10;# Log files&#10;*.log&#10;logs/&#10;npm-debug.log*&#10;yarn-debug.log*&#10;yarn-error.log*&#10;&#10;# Runtime data&#10;pids&#10;*.pid&#10;*.seed&#10;*.pid.lock&#10;&#10;# Temporary files&#10;*.tmp&#10;*.temp&#10;temp/&#10;tmp/&#10;&#10;# Backup files&#10;*.bak&#10;*.backup&#10;*~&#10;&#10;# Terraform configuration files (exclude from repo)&#10;terraform/*.tf" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Jenkinsfile">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Jenkinsfile" />
              <option name="originalContent" value="pipeline {&#10;    agent any&#10;&#10;    options {&#10;        skipDefaultCheckout()&#10;        timestamps()&#10;    }&#10;&#10;    environment {&#10;        // Simple local tags only for now; no AWS/ECR until configured&#10;        BUILD_TAG_BASE = &quot;local&quot;&#10;    }&#10;&#10;    stages {&#10;        stage('Checkout') {&#10;            steps { checkout scm }&#10;        }&#10;&#10;        stage('Prep') {&#10;            steps {&#10;                sh 'chmod +x apigateway/mvnw bookingservice/mvnw inventoryservice/mvnw orderservice/mvnw || true'&#10;                sh 'sed -i &quot;s/\r$//&quot; apigateway/mvnw bookingservice/mvnw inventoryservice/mvnw orderservice/mvnw || true'&#10;                sh 'echo &quot;Prep done&quot;'&#10;            }&#10;        }&#10;&#10;        stage('Verify Docker') {&#10;            steps {&#10;                sh 'docker --version'&#10;                sh 'docker ps -q &gt;/dev/null || true'&#10;            }&#10;        }&#10;&#10;        stage('Build JARs') {&#10;            parallel {&#10;                stage('apigateway') {&#10;                    steps { dir('apigateway'){ sh './mvnw -B clean package -DskipTests' } }&#10;                }&#10;                stage('bookingservice') {&#10;                    steps { dir('bookingservice'){ sh './mvnw -B clean package -DskipTests' } }&#10;                }&#10;                stage('inventoryservice') {&#10;                    steps { dir('inventoryservice'){ sh './mvnw -B clean package -DskipTests' } }&#10;                }&#10;                stage('orderservice') {&#10;                    steps { dir('orderservice'){ sh './mvnw -B clean package -DskipTests' } }&#10;                }&#10;            }&#10;            post {&#10;                success {&#10;                    archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true&#10;                }&#10;            }&#10;        }&#10;&#10;        stage('Build Docker Images (local only)') {&#10;            parallel {&#10;                stage('apigateway image') {&#10;                    steps { dir('apigateway'){ sh 'docker build -t apigateway:${BUILD_NUMBER} .' } }&#10;                }&#10;                stage('bookingservice image') {&#10;                    steps { dir('bookingservice'){ sh 'docker build -t bookingservice:${BUILD_NUMBER} .' } }&#10;                }&#10;                stage('inventoryservice image') {&#10;                    steps { dir('inventoryservice'){ sh 'docker build -t inventoryservice:${BUILD_NUMBER} .' } }&#10;                }&#10;                stage('orderservice image') {&#10;                    steps { dir('orderservice'){ sh 'docker build -t orderservice:${BUILD_NUMBER} .' } }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Future stage placeholder for pushing to ECR once credentials &amp; repos exist&#10;        // stage('Push to ECR') { when { expression { return false } } steps { echo 'Configure AWS/ECR first.' } }&#10;    }&#10;&#10;    post {&#10;        success {&#10;            archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true&#10;        }&#10;        always { cleanWs() }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="pipeline {&#10;    agent any&#10;&#10;    options {&#10;        skipDefaultCheckout()&#10;        timestamps()&#10;    }&#10;&#10;    environment {&#10;        // Simple local tags only for now; no AWS/ECR until configured&#10;        BUILD_TAG_BASE = &quot;local&quot;&#10;    }&#10;&#10;    stages {&#10;        stage('Checkout') {&#10;            steps { checkout scm }&#10;        }&#10;&#10;        stage('Prep') {&#10;            steps {&#10;                sh 'chmod +x apigateway/mvnw bookingservice/mvnw inventoryservice/mvnw orderservice/mvnw || true'&#10;                sh 'sed -i &quot;s/\r$//&quot; apigateway/mvnw bookingservice/mvnw inventoryservice/mvnw orderservice/mvnw || true'&#10;                sh 'echo &quot;Prep done&quot;'&#10;            }&#10;        }&#10;&#10;        stage('Verify Docker') {&#10;            steps {&#10;                sh 'docker --version'&#10;                sh 'docker ps -q &gt;/dev/null || true'&#10;            }&#10;        }&#10;&#10;        stage('Build JARs') {&#10;            parallel {&#10;                stage('apigateway') {&#10;                    steps { dir('apigateway'){ sh './mvnw -B clean package -DskipTests' } }&#10;                }&#10;                stage('bookingservice') {&#10;                    steps { dir('bookingservice'){ sh './mvnw -B clean package -DskipTests' } }&#10;                }&#10;                stage('inventoryservice') {&#10;                    steps { dir('inventoryservice'){ sh './mvnw -B clean package -DskipTests' } }&#10;                }&#10;                stage('orderservice') {&#10;                    steps { dir('orderservice'){ sh './mvnw -B clean package -DskipTests' } }&#10;                }&#10;            }&#10;            post {&#10;                success {&#10;                    archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true&#10;                }&#10;            }&#10;        }&#10;&#10;        stage('Build Docker Images (local only)') {&#10;            parallel {&#10;                stage('apigateway image') {&#10;                    steps { dir('apigateway'){ sh 'docker build -t apigateway:${BUILD_NUMBER} .' } }&#10;                }&#10;                stage('bookingservice image') {&#10;                    steps { dir('bookingservice'){ sh 'docker build -t bookingservice:${BUILD_NUMBER} .' } }&#10;                }&#10;                stage('inventoryservice image') {&#10;                    steps { dir('inventoryservice'){ sh 'docker build -t inventoryservice:${BUILD_NUMBER} .' } }&#10;                }&#10;                stage('orderservice image') {&#10;                    steps { dir('orderservice'){ sh 'docker build -t orderservice:${BUILD_NUMBER} .' } }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Future stage placeholder for pushing to ECR once credentials &amp; repos exist&#10;        // stage('Push to ECR') { when { expression { return false } } steps { echo 'Configure AWS/ECR first.' } }&#10;    }&#10;&#10;    post {&#10;        always { cleanWs() }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="originalContent" value="# **Microservice3** ![Java](https://img.icons8.com/color/48/000000/java-coffee-cup-logo.png)&#10;&#10;##  Overview&#10;&#10;**Microservice3** is a ticketing system built with a microservices architecture using Spring Boot. It includes four core services: Inventory, Booking, Order, and an API Gateway. Each service communicates through REST APIs and Kafka for event-driven operations. Keycloak handles authentication, and all components are containerized using Docker and orchestrated with Docker Compose.&#10;&#10;- **Inventory Service** – Manages venue and event capacities.&#10;- **Booking Service** – Handles booking requests and ticket validation.&#10;- **Order Service** – Listens to booking events and creates orders.&#10;- **API Gateway** – Routes client requests and enforces security via Keycloak.&#10;&#10;All services are containerized with Docker and use **Apache Kafka** for asynchronous communication. **Keycloak** provides OAuth2-based authentication. **MySQL** is used for data persistence, with **Flyway** handling schema migrations.&#10;&#10;---&#10;&#10;##  Tools &amp; Technologies Used&#10;&#10;### Languages &amp; Frameworks&#10;- Java 21&#10;- Spring Boot (Web, Data JPA, Security)&#10;- Lombok&#10;&#10;### Architecture &amp; Communication&#10;- Microservices&#10;- REST APIs&#10;- Apache Kafka (event-driven architecture)&#10;&#10;### Database &amp; Migrations&#10;- MySQL&#10;- Flyway&#10;&#10;### Authentication &amp; Security&#10;- Keycloak (OAuth2 Resource Server)&#10;&#10;### Containerization &amp; Orchestration&#10;- Docker&#10;- Docker Compose&#10;&#10;### DevOps &amp; CI/CD&#10;- Maven&#10;- Git&#10;- Jenkins (optional)&#10;&#10;### Tools&#10;- Postman (API testing)&#10;- Kafka UI&#10;- IntelliJ IDEA&#10;&#10;---&#10;&#10;##  Features&#10;&#10;- ✅ Event &amp; Venue Inventory Management&#10;- ✅ Real-time Booking Validation&#10;- ✅ Kafka-Powered Order Processing&#10;- ✅ API Gateway Routing with OAuth2 Security&#10;- ✅ Dockerized Environment with Isolated Services&#10;&#10;---&#10;&#10;### Setup &amp; Installation&#10;&#10;1. **Clone the Repository**&#10;   ```bash&#10;   git clone https://github.com/yourusername/inventory-booking-service.git&#10;   cd inventory-booking-service&#10;   ```&#10;&#10;2. **Start Docker Services**&#10;   ```bash&#10;   docker-compose up -d&#10;   ```&#10;&#10;3. **Configure Application Properties**&#10;   - Update `src/main/resources/application.properties` with MySQL and Kafka settings.&#10;&#10;4. **Run the Services**&#10;   Navigate to each service directory and run:&#10;   ```bash&#10;   mvn spring-boot:run&#10;   ```&#10;   Run in this order:&#10;   - `inventoryservice`&#10;   - `bookingservice`&#10;   - `orderservice`&#10;   - `apigateway`&#10;&#10;5. **Test APIs**&#10;   - **Inventory Service**:&#10;     - `http://localhost:8080/api/v1/inventory/venue/1`&#10;     - `http://localhost:8080/api/v1/inventory/events`&#10;   - **Booking Service**:&#10;     - `http://localhost:8081/api/v1/booking`&#10;     - Example POST data:&#10;       ```json&#10;       {&#10;         &quot;userId&quot;: 1,&#10;         &quot;eventId&quot;: 1,&#10;         &quot;ticketCount&quot;: 50&#10;       }&#10;       ```&#10;&#10;6. **Stop Services**&#10;   ```bash&#10;   docker-compose down&#10;   ```&#10;&#10;### **INVENTORY SERVICE**&#10;&#10;**Steps:**&#10;&#10;1. Go to [start.spring.io](https://start.spring.io)&#10;&#10;   * Project: Maven&#10;   * Spring Boot: 3.4.2&#10;   * Packaging: Jar&#10;   * Java: 21&#10;   * Name: `inventoryservice`&#10;   * Group: `kevinll`&#10;   * Dependencies: Spring Web, Lombok, Spring Data JPA, MySQL Driver, Flyway Migration&#10;&#10;2. Open the project in IntelliJ.&#10;   Create a package `controller` and file `InventoryController`.&#10;&#10;3. Create a package `response` and file `EventInventoryResponse`.&#10;&#10;4. Create a package `service` and file `InventoryService`.&#10;   Ensure `EventRepository` and `VenueRepository` are implemented for DB access.&#10;&#10;5. Create a package `repository` and interfaces:&#10;&#10;   * `EventRepository`&#10;   * `VenueRepository`&#10;&#10;6. Create a package `entity`, add class `Venue`.&#10;   Add `@Getter`, `@Setter`, and annotate the table name.&#10;&#10;7. In the `entity` folder, create `Event` class.&#10;&#10;8. In the `response` package, add class `VenueInventoryResponse`.&#10;&#10;9. Create `docker-compose.yml` in root for MySQL.&#10;   Then, under root create folder `docker/mysql/init.sql`.&#10;&#10;10. Ensure DB credentials are in `application.properties`.&#10;&#10;11. Under `resources`, create folder `db.migration`, and add Flyway script `V1__init.sql`.&#10;&#10;12. Populate MySQL `flyway_schema` with sample `event` and `venue` data.&#10;    Example: `(&quot;Cars&quot;, 1, 20000, 20000);`&#10;&#10;13. Run the application by creating a run config with `InventoryserviceApplication.java`.&#10;&#10;14. Test APIs with Postman:&#10;&#10;    * GET `http://localhost:8080/api/v1/inventory/venue/1`&#10;    * GET `http://localhost:8080/api/v1/inventory/events`&#10;&#10;---&#10;&#10;### **BOOKING SERVICE**&#10;&#10;15. Go to [start.spring.io](https://start.spring.io)&#10;&#10;    * Group: `kevinll`&#10;    * Artifact: `bookingservice`&#10;    * Same setup&#10;    * Dependencies: Spring Web, Lombok, Spring Data JPA, MySQL Driver, Spring for Apache Kafka&#10;&#10;16. Open in IntelliJ. Create folder `controller` and file `BookingController`.&#10;&#10;17. Create folder `service`, add file `BookingService`.&#10;&#10;18. Create folder `request`, add file `BookingRequest` (DTO-like).&#10;&#10;19. Create folder `response`, add file `BookingResponse` (DTO-like).&#10;&#10;20. In `inventoryservice/db.migration`, add:&#10;&#10;    * `V2_add_ticket.sql`&#10;    * `V3_create_customer_table.sql`&#10;    * `V4_create_order_table.sql`&#10;&#10;21. If errors:&#10;    Run:&#10;&#10;    ```sql&#10;    SET SQL_SAFE_UPDATES = 0;&#10;    DELETE FROM ticketing.flyway_schema_history WHERE version = 4;&#10;    ```&#10;&#10;22. In `bookingservice`, create `repository` and interface `CustomerRepository`.&#10;&#10;23. Create package `entity`, add class `Customer`.&#10;&#10;24. Create package `client`, add class `InventoryServiceClient`.&#10;&#10;25. In `response`, create `InventoryResponse`:&#10;    Include fields like `eventId`, `event`, `capacity`, `venue: VenueResponse`.&#10;&#10;26. In `response`, create class `VenueResponse`.&#10;&#10;27. Set `application.properties` with port `8081`.&#10;    Add run config: `bookingservice`.&#10;&#10;28. Run Docker, `inventoryservice`, and `bookingservice`.&#10;&#10;---&#10;&#10;### **KAFKA**&#10;&#10;29. In `inventoryservice`, extend `docker-compose.yml` with:&#10;&#10;    * `zookeeper:`&#10;    * `kafka-broker:`&#10;    * `kafka-ui:`&#10;    * `kafka-schema-registry:`&#10;      Run:&#10;&#10;    ```&#10;    docker compose down&#10;    docker compose up -d&#10;    ```&#10;&#10;30. In `bookingservice`, create `event` package and class `BookingEvent`.&#10;&#10;31. In `BookingService.java`, add Kafka setup and method `createBookingEvent` with `kafkaTemplate.send()`.&#10;&#10;32. In `application.properties`, add Kafka port `9092`.&#10;    Verify in Docker.&#10;&#10;33. In Postman, test POST:&#10;    `http://localhost:8081/api/v1/booking`&#10;    Ensure 200 OK to trigger topic.&#10;&#10;34. Go to `localhost:8084` (Kafka UI).&#10;    Use:&#10;&#10;    * Cluster: `localhost`&#10;    * Bootstrap server: `kafka-broker:29092`&#10;&#10;---&#10;&#10;### **ORDER SERVICE**&#10;&#10;35. Go to [start.spring.io](https://start.spring.io)&#10;&#10;    * Artifact: `orderservice`&#10;    * Same config and dependencies&#10;&#10;36. In `orderservice`, create `service` with class `OrderService`.&#10;&#10;37. Add package `example.kevinll.bookingservice`, with class `BookingEvent`.&#10;&#10;38. Create `entity` package, class `Order`.&#10;&#10;39. Create `repository` package, interface `OrderRepository`.&#10;&#10;40. In `inventoryservice`, add `@PutMapping` in `InventoryController` for capacity update.&#10;&#10;41. In `orderservice`, create `client` package with `InventoryServiceClient`.&#10;&#10;42. Ensure `application.properties` is configured with DB/Kafka ports.&#10;&#10;43. Match path for `BookingEvent`, add `@KafkaListener` in `OrderService`.&#10;&#10;44. Run all services and test with Postman:&#10;&#10;    * GET: `http://localhost:8080/api/v1/inventory/event/1`&#10;    * POST: `http://localhost:8081/api/v1/booking`&#10;    * SQL: `SELECT * FROM ticketing.order;`&#10;&#10;---&#10;&#10;### **API GATEWAY**&#10;&#10;45. Go to [start.spring.io](https://start.spring.io)&#10;&#10;    * Artifact: `apigateway`&#10;    * Add dependency: Gateway&#10;&#10;46. In IntelliJ, create package `route`:&#10;&#10;    * `InventoryServiceRoutes`&#10;    * `BookingServiceRoutes`&#10;&#10;47. In `application.properties`, set port `8090`.&#10;&#10;48. Run all services including `apigateway`.&#10;    Test with Postman:&#10;&#10;    * POST `http://localhost:8090/api/v1/booking`&#10;&#10;      ```json&#10;      { &quot;userId&quot;: 1, &quot;eventId&quot;: 1, &quot;tocketCount&quot;: 50 }&#10;      ```&#10;    * GET `http://localhost:8090/api/v1/inventory/event/1`&#10;&#10;---&#10;&#10;### **SPRING SECURITY WITH KEYCLOAK**&#10;&#10;49. In `inventoryservice/docker-compose.yml`, add `keycloak-db:` and `keycloak:`&#10;    Use unused port (e.g., 8091)&#10;&#10;50. Run:&#10;&#10;    ```&#10;    docker compose up -d&#10;    ```&#10;&#10;    Visit `localhost:8091`, login with `admin/admin`&#10;    Create a Realm (e.g., `ticketing-security-realm`)&#10;&#10;51. Set up Keycloak clients under the created realm.&#10;&#10;52. In `apigateway`, add dependency:&#10;&#10;    ```xml&#10;    &lt;artifactId&gt;spring-boot-starter-oauth2-resource-server&lt;/artifactId&gt;&#10;    ```&#10;&#10;53. Create package `config`, class `SecurityConfig`.&#10;&#10;54. In `application.properties`, configure Keycloak.&#10;    Test authorization on:&#10;&#10;    * `http://localhost:8090/api/v1/booking`&#10;    * `http://localhost:8090/api/v1/inventory/event/1`&#10;&#10;### ⚠️ Technical Challenges&#10;&#10;#### 1. Microservice Coordination&#10;Running multiple Spring Boot apps alongside Kafka, MySQL, and Keycloak in Docker Compose requires careful orchestration and port management.&#10;&#10;#### 2. Flyway Migration Conflicts&#10;Schema versioning across services can lead to `flyway_schema_history` conflicts, especially during parallel development or rollback scenarios.&#10;&#10;#### 3. Inter-Service Communication&#10;Implementing reliable Kafka event publishing/consumption and REST client calls (e.g., `InventoryServiceClient`) introduces serialization and network concerns.&#10;&#10;#### 4. Security Integration&#10;Configuring Keycloak with Spring Security and OAuth2 Resource Server in the API Gateway involves precise token validation and role mapping.&#10;&#10;### ⚠️ Jenkins pipeline not reading Docker plugin&#10;Make sure all plugins and permissions for the user path are set correctly, and ensure that the build is the same as the local build. To reduce errors, don’t set up ECR/ECS yet. add Chmod permission to pipeline user to be able to read docker and run docker commands. like jekins user to docker group. give docker the user: root.&#10;&#10;&#10;### ⚠️ Jenkins Pipeline&#10;Step1. To set up a Jenkins pipeline for this microservice architecture, create a `Jenkinsfile` in the root directory&#10;Step2. Define stages for building, testing, and deploying each service&#10;Step3. Use Docker desktop to be able to start Jenkins use command `docker run -p 8080:8080 jenkins/jenkins:lts`&#10;Step4. Access Jenkins at `http://localhost:8080` and configure the pipeline to use the `Jenkinsfile`&#10;step5. Configuration should include plugins for Docker, ECR and AWS Steps&#10;step5. Ensure each service has its own Dockerfile for building images before pushing to a container registry like Docker Hub or AWS ECR or running the jenkins pipeline&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;![img_7.png](img_7.png)&#10;![img_6.png](img_6.png)&#10;![img_4.png](img_4.png)&#10;![img.png](img.png)&#10;![img_5.png](img_5.png)&#10;![img_1.png](img_1.png)&#10;![img_2.png](img_2.png)&#10;![img_3.png](img_3.png)&#10;&#10;" />
              <option name="updatedContent" value="# **Microservice3** ![Java](https://img.icons8.com/color/48/000000/java-coffee-cup-logo.png)&#10;&#10;##  Overview&#10;&#10;**Microservice3** is a ticketing system built with a microservices architecture using Spring Boot. It includes four core services: Inventory, Booking, Order, and an API Gateway. Each service communicates through REST APIs and Kafka for event-driven operations. Keycloak handles authentication, and all components are containerized using Docker and orchestrated with Docker Compose.&#10;&#10;- **Inventory Service** – Manages venue and event capacities.&#10;- **Booking Service** – Handles booking requests and ticket validation.&#10;- **Order Service** – Listens to booking events and creates orders.&#10;- **API Gateway** – Routes client requests and enforces security via Keycloak.&#10;&#10;All services are containerized with Docker and use **Apache Kafka** for asynchronous communication. **Keycloak** provides OAuth2-based authentication. **MySQL** is used for data persistence, with **Flyway** handling schema migrations.&#10;&#10;---&#10;&#10;##  Tools &amp; Technologies Used&#10;&#10;### Languages &amp; Frameworks&#10;- Java 21&#10;- Spring Boot (Web, Data JPA, Security)&#10;- Lombok&#10;&#10;### Architecture &amp; Communication&#10;- Microservices&#10;- REST APIs&#10;- Apache Kafka (event-driven architecture)&#10;&#10;### Database &amp; Migrations&#10;- MySQL&#10;- Flyway&#10;&#10;### Authentication &amp; Security&#10;- Keycloak (OAuth2 Resource Server)&#10;&#10;### Containerization &amp; Orchestration&#10;- Docker&#10;- Docker Compose&#10;&#10;### DevOps &amp; CI/CD&#10;- Maven&#10;- Git&#10;- Jenkins (optional)&#10;&#10;### Tools&#10;- Postman (API testing)&#10;- Kafka UI&#10;- IntelliJ IDEA&#10;&#10;---&#10;&#10;##  Features&#10;&#10;- ✅ Event &amp; Venue Inventory Management&#10;- ✅ Real-time Booking Validation&#10;- ✅ Kafka-Powered Order Processing&#10;- ✅ API Gateway Routing with OAuth2 Security&#10;- ✅ Dockerized Environment with Isolated Services&#10;&#10;---&#10;&#10;### Setup &amp; Installation&#10;&#10;1. **Clone the Repository**&#10;   ```bash&#10;   git clone https://github.com/yourusername/inventory-booking-service.git&#10;   cd inventory-booking-service&#10;   ```&#10;&#10;2. **Start Docker Services**&#10;   ```bash&#10;   docker-compose up -d&#10;   ```&#10;&#10;3. **Configure Application Properties**&#10;   - Update `src/main/resources/application.properties` with MySQL and Kafka settings.&#10;&#10;4. **Run the Services**&#10;   Navigate to each service directory and run:&#10;   ```bash&#10;   mvn spring-boot:run&#10;   ```&#10;   Run in this order:&#10;   - `inventoryservice`&#10;   - `bookingservice`&#10;   - `orderservice`&#10;   - `apigateway`&#10;&#10;5. **Test APIs**&#10;   - **Inventory Service**:&#10;     - `http://localhost:8080/api/v1/inventory/venue/1`&#10;     - `http://localhost:8080/api/v1/inventory/events`&#10;   - **Booking Service**:&#10;     - `http://localhost:8081/api/v1/booking`&#10;     - Example POST data:&#10;       ```json&#10;       {&#10;         &quot;userId&quot;: 1,&#10;         &quot;eventId&quot;: 1,&#10;         &quot;ticketCount&quot;: 50&#10;       }&#10;       ```&#10;&#10;6. **Stop Services**&#10;   ```bash&#10;   docker-compose down&#10;   ```&#10;&#10;### **INVENTORY SERVICE**&#10;&#10;**Steps:**&#10;&#10;1. Go to [start.spring.io](https://start.spring.io)&#10;&#10;   * Project: Maven&#10;   * Spring Boot: 3.4.2&#10;   * Packaging: Jar&#10;   * Java: 21&#10;   * Name: `inventoryservice`&#10;   * Group: `kevinll`&#10;   * Dependencies: Spring Web, Lombok, Spring Data JPA, MySQL Driver, Flyway Migration&#10;&#10;2. Open the project in IntelliJ.&#10;   Create a package `controller` and file `InventoryController`.&#10;&#10;3. Create a package `response` and file `EventInventoryResponse`.&#10;&#10;4. Create a package `service` and file `InventoryService`.&#10;   Ensure `EventRepository` and `VenueRepository` are implemented for DB access.&#10;&#10;5. Create a package `repository` and interfaces:&#10;&#10;   * `EventRepository`&#10;   * `VenueRepository`&#10;&#10;6. Create a package `entity`, add class `Venue`.&#10;   Add `@Getter`, `@Setter`, and annotate the table name.&#10;&#10;7. In the `entity` folder, create `Event` class.&#10;&#10;8. In the `response` package, add class `VenueInventoryResponse`.&#10;&#10;9. Create `docker-compose.yml` in root for MySQL.&#10;   Then, under root create folder `docker/mysql/init.sql`.&#10;&#10;10. Ensure DB credentials are in `application.properties`.&#10;&#10;11. Under `resources`, create folder `db.migration`, and add Flyway script `V1__init.sql`.&#10;&#10;12. Populate MySQL `flyway_schema` with sample `event` and `venue` data.&#10;    Example: `(&quot;Cars&quot;, 1, 20000, 20000);`&#10;&#10;13. Run the application by creating a run config with `InventoryserviceApplication.java`.&#10;&#10;14. Test APIs with Postman:&#10;&#10;    * GET `http://localhost:8080/api/v1/inventory/venue/1`&#10;    * GET `http://localhost:8080/api/v1/inventory/events`&#10;&#10;---&#10;&#10;### **BOOKING SERVICE**&#10;&#10;15. Go to [start.spring.io](https://start.spring.io)&#10;&#10;    * Group: `kevinll`&#10;    * Artifact: `bookingservice`&#10;    * Same setup&#10;    * Dependencies: Spring Web, Lombok, Spring Data JPA, MySQL Driver, Spring for Apache Kafka&#10;&#10;16. Open in IntelliJ. Create folder `controller` and file `BookingController`.&#10;&#10;17. Create folder `service`, add file `BookingService`.&#10;&#10;18. Create folder `request`, add file `BookingRequest` (DTO-like).&#10;&#10;19. Create folder `response`, add file `BookingResponse` (DTO-like).&#10;&#10;20. In `inventoryservice/db.migration`, add:&#10;&#10;    * `V2_add_ticket.sql`&#10;    * `V3_create_customer_table.sql`&#10;    * `V4_create_order_table.sql`&#10;&#10;21. If errors:&#10;    Run:&#10;&#10;    ```sql&#10;    SET SQL_SAFE_UPDATES = 0;&#10;    DELETE FROM ticketing.flyway_schema_history WHERE version = 4;&#10;    ```&#10;&#10;22. In `bookingservice`, create `repository` and interface `CustomerRepository`.&#10;&#10;23. Create package `entity`, add class `Customer`.&#10;&#10;24. Create package `client`, add class `InventoryServiceClient`.&#10;&#10;25. In `response`, create `InventoryResponse`:&#10;    Include fields like `eventId`, `event`, `capacity`, `venue: VenueResponse`.&#10;&#10;26. In `response`, create class `VenueResponse`.&#10;&#10;27. Set `application.properties` with port `8081`.&#10;    Add run config: `bookingservice`.&#10;&#10;28. Run Docker, `inventoryservice`, and `bookingservice`.&#10;&#10;---&#10;&#10;### **KAFKA**&#10;&#10;29. In `inventoryservice`, extend `docker-compose.yml` with:&#10;&#10;    * `zookeeper:`&#10;    * `kafka-broker:`&#10;    * `kafka-ui:`&#10;    * `kafka-schema-registry:`&#10;      Run:&#10;&#10;    ```&#10;    docker compose down&#10;    docker compose up -d&#10;    ```&#10;&#10;30. In `bookingservice`, create `event` package and class `BookingEvent`.&#10;&#10;31. In `BookingService.java`, add Kafka setup and method `createBookingEvent` with `kafkaTemplate.send()`.&#10;&#10;32. In `application.properties`, add Kafka port `9092`.&#10;    Verify in Docker.&#10;&#10;33. In Postman, test POST:&#10;    `http://localhost:8081/api/v1/booking`&#10;    Ensure 200 OK to trigger topic.&#10;&#10;34. Go to `localhost:8084` (Kafka UI).&#10;    Use:&#10;&#10;    * Cluster: `localhost`&#10;    * Bootstrap server: `kafka-broker:29092`&#10;&#10;---&#10;&#10;### **ORDER SERVICE**&#10;&#10;35. Go to [start.spring.io](https://start.spring.io)&#10;&#10;    * Artifact: `orderservice`&#10;    * Same config and dependencies&#10;&#10;36. In `orderservice`, create `service` with class `OrderService`.&#10;&#10;37. Add package `example.kevinll.bookingservice`, with class `BookingEvent`.&#10;&#10;38. Create `entity` package, class `Order`.&#10;&#10;39. Create `repository` package, interface `OrderRepository`.&#10;&#10;40. In `inventoryservice`, add `@PutMapping` in `InventoryController` for capacity update.&#10;&#10;41. In `orderservice`, create `client` package with `InventoryServiceClient`.&#10;&#10;42. Ensure `application.properties` is configured with DB/Kafka ports.&#10;&#10;43. Match path for `BookingEvent`, add `@KafkaListener` in `OrderService`.&#10;&#10;44. Run all services and test with Postman:&#10;&#10;    * GET: `http://localhost:8080/api/v1/inventory/event/1`&#10;    * POST: `http://localhost:8081/api/v1/booking`&#10;    * SQL: `SELECT * FROM ticketing.order;`&#10;&#10;---&#10;&#10;### **API GATEWAY**&#10;&#10;45. Go to [start.spring.io](https://start.spring.io)&#10;&#10;    * Artifact: `apigateway`&#10;    * Add dependency: Gateway&#10;&#10;46. In IntelliJ, create package `route`:&#10;&#10;    * `InventoryServiceRoutes`&#10;    * `BookingServiceRoutes`&#10;&#10;47. In `application.properties`, set port `8090`.&#10;&#10;48. Run all services including `apigateway`.&#10;    Test with Postman:&#10;&#10;    * POST `http://localhost:8090/api/v1/booking`&#10;&#10;      ```json&#10;      { &quot;userId&quot;: 1, &quot;eventId&quot;: 1, &quot;tocketCount&quot;: 50 }&#10;      ```&#10;    * GET `http://localhost:8090/api/v1/inventory/event/1`&#10;&#10;---&#10;&#10;### **SPRING SECURITY WITH KEYCLOAK**&#10;&#10;49. In `inventoryservice/docker-compose.yml`, add `keycloak-db:` and `keycloak:`&#10;    Use unused port (e.g., 8091)&#10;&#10;50. Run:&#10;&#10;    ```&#10;    docker compose up -d&#10;    ```&#10;&#10;    Visit `localhost:8091`, login with `admin/admin`&#10;    Create a Realm (e.g., `ticketing-security-realm`)&#10;&#10;51. Set up Keycloak clients under the created realm.&#10;&#10;52. In `apigateway`, add dependency:&#10;&#10;    ```xml&#10;    &lt;artifactId&gt;spring-boot-starter-oauth2-resource-server&lt;/artifactId&gt;&#10;    ```&#10;&#10;53. Create package `config`, class `SecurityConfig`.&#10;&#10;54. In `application.properties`, configure Keycloak.&#10;    Test authorization on:&#10;&#10;    * `http://localhost:8090/api/v1/booking`&#10;    * `http://localhost:8090/api/v1/inventory/event/1`&#10;&#10;### ⚠️ Technical Challenges&#10;&#10;#### 1. Microservice Coordination&#10;Running multiple Spring Boot apps alongside Kafka, MySQL, and Keycloak in Docker Compose requires careful orchestration and port management.&#10;&#10;#### 2. Flyway Migration Conflicts&#10;Schema versioning across services can lead to `flyway_schema_history` conflicts, especially during parallel development or rollback scenarios.&#10;&#10;#### 3. Inter-Service Communication&#10;Implementing reliable Kafka event publishing/consumption and REST client calls (e.g., `InventoryServiceClient`) introduces serialization and network concerns.&#10;&#10;#### 4. Security Integration&#10;Configuring Keycloak with Spring Security and OAuth2 Resource Server in the API Gateway involves precise token validation and role mapping.&#10;&#10;### ⚠️ CI/CD (Jenkins) – Issues Encountered &amp; Resolutions&#10;Problems faced while bringing up a local Jenkins pipeline for these services and how they were solved:&#10;&#10;| Issue | Symptom | Fix |&#10;|-------|---------|-----|&#10;| Jenkins home volume permissions | Repeating `Permission denied` writing `copy_reference_file.log` | Recreate container &amp; ensure host dir owned by uid 1000 (or run container as root for local dev): `chown -R 1000:1000 jenkins-data` or add `user: root` temporarily. |&#10;| Docker socket permission | `permission denied while trying to connect to the Docker daemon socket` | Add Jenkins user to docker group in custom Jenkins image or run with `-v /var/run/docker.sock:/var/run/docker.sock` plus `groupadd -for docker &amp;&amp; usermod -aG docker jenkins`. For quickest local test run container as root. |&#10;| `mvnw: Permission denied` | Build stage exit code 126 | Commit executable flag: `git update-index --chmod=+x */mvnw` (Windows users may need `wsl` or manual chmod in container). |&#10;| Missing artifacts to archive | Post stage error: `No artifacts found '**/target/*.jar'` | Ensure build not cleaned before archiving. Move `archiveArtifacts` before `cleanWs` or remove workspace wipe. |&#10;| Workspace not a Git repo after restart | `fatal: not in a git directory` | Wipe workspace (`Workspace -&gt; Wipe out`) then rebuild so Jenkins re-clones. |&#10;| Duplicate step numbering / unclear pipeline doc | Hard to follow | Consolidated clear 1..12 replication steps below. |&#10;| Early ECR/ECS integration noise | Auth / login failures | Defer cloud push until local pipeline (build + local image build) is green. |&#10;&#10;### Jenkins Local Pipeline – Quick Replication Steps&#10;1. Build / rebuild Jenkins (custom image if adding docker group) and start only Jenkins: `docker compose up -d jenkins` (or `docker run -d -p 8080:8080 -v jenkins-data:/var/jenkins_home -v /var/run/docker.sock:/var/run/docker.sock --name jenkins jenkins/jenkins:lts`)&#10;2. Get initial password: `docker exec -it jenkins cat /var/jenkins_home/secrets/initialAdminPassword` and finish setup (Suggested plugins + Docker + Pipeline + Git + Credentials + Workspace Cleanup optional).&#10;3. Fix Docker access (choose one):&#10;   - Preferred: custom Dockerfile adding Jenkins user to docker group.&#10;   - Fast: run container as root (local only).&#10;4. Ensure `mvnw` scripts executable (inside repo root): `git update-index --chmod=+x apigateway/mvnw bookingservice/mvnw inventoryservice/mvnw orderservice/mvnw &amp;&amp; git commit -m &quot;chmod mvnw&quot; &amp;&amp; git push`.&#10;5. Create Multibranch or Pipeline job pointing to repo (Jenkinsfile at root).&#10;6. Run build. Verify stages: Checkout -&gt; Build JARs (parallel) -&gt; (optional) Build Docker Images.&#10;7. If Docker build fails with socket permission denied, apply step 3 fix then rebuild.&#10;8. If artifact archiving needed: place `archiveArtifacts artifacts: '**/target/*.jar'` BEFORE any workspace cleanup; or remove `cleanWs` post step.&#10;9. To reset stuck workspace: Wipe via UI or `docker exec -it jenkins bash -lc 'rm -rf /var/jenkins_home/workspace/Jenkinspipe*'` then rebuild.&#10;10. Tag &amp; build images locally only (increment a BUILD_NUMBER env var or use Jenkins `${BUILD_NUMBER}`).&#10;11. After success, introduce ECR: create repo, add AWS creds in Jenkins, then add a push stage (login via `aws ecr get-login-password | docker login ...`).&#10;12. Later extend with Terraform (ECR, ECS Cluster, Fargate Service) once images push reliably.&#10;&#10;### Notes&#10;- Defer ECS until local CI is stable.&#10;- Keep Dockerfile per service minimal (multi-stage build recommended for production).&#10;- Avoid cleaning workspace before archiving deliverables.&#10;- Windows host users: line endings and execute bit require attention; prefer committing from WSL or enabling core.autocrlf=false.&#10;&#10;### Minimal Jenkinsfile Pattern (Local Build Only)&#10;```&#10;pipeline {&#10;  agent any&#10;  stages {&#10;    stage('Build JARs') {&#10;      parallel {&#10;        stage('apigateway'){ steps { dir('apigateway'){ sh './mvnw -B clean package -DskipTests' } } }&#10;        stage('bookingservice'){ steps { dir('bookingservice'){ sh './mvnw -B clean package -DskipTests' } } }&#10;        stage('inventoryservice'){ steps { dir('inventoryservice'){ sh './mvnw -B clean package -DskipTests' } } }&#10;        stage('orderservice'){ steps { dir('orderservice'){ sh './mvnw -B clean package -DskipTests' } } }&#10;      }&#10;    }&#10;    stage('Build Images (local)') {&#10;      parallel {&#10;        stage('apigateway image'){ steps { dir('apigateway'){ sh 'docker build -t apigateway:${BUILD_NUMBER} .' } } }&#10;        stage('bookingservice image'){ steps { dir('bookingservice'){ sh 'docker build -t bookingservice:${BUILD_NUMBER} .' } } }&#10;        stage('inventoryservice image'){ steps { dir('inventoryservice'){ sh 'docker build -t inventoryservice:${BUILD_NUMBER} .' } } }&#10;        stage('orderservice image'){ steps { dir('orderservice'){ sh 'docker build -t orderservice:${BUILD_NUMBER} .' } } }&#10;      }&#10;    }&#10;  }&#10;  post {&#10;    success {&#10;      archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true&#10;    }&#10;    cleanup {&#10;      // Optional: cleanWs()  // enable only if not archiving or archive first&#10;    }&#10;  }&#10;}&#10;```&#10;&#10;---&#10;&#10;![img_7.png](img_7.png)&#10;![img_6.png](img_6.png)&#10;![img_4.png](img_4.png)&#10;![img.png](img.png)&#10;![img_5.png](img_5.png)&#10;![img_1.png](img_1.png)&#10;![img_2.png](img_2.png)&#10;![img_3.png](img_3.png)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/apigateway/Dockerfile">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/apigateway/Dockerfile" />
              <option name="updatedContent" value="FROM openjdk:17-jdk-slim&#10;&#10;WORKDIR /app&#10;&#10;# Copy the JAR file&#10;COPY target/apigateway-*.jar app.jar&#10;&#10;# Expose the port your application runs on&#10;EXPOSE 8080&#10;&#10;# Run the application&#10;ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;app.jar&quot;]" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/bookingservice/Dockerfile">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/bookingservice/Dockerfile" />
              <option name="updatedContent" value="FROM openjdk:17-jdk-slim&#10;&#10;WORKDIR /app&#10;&#10;# Copy the JAR file&#10;COPY target/bookingservice-*.jar app.jar&#10;&#10;# Expose the port your application runs on&#10;EXPOSE 8081&#10;&#10;# Run the application&#10;ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;app.jar&quot;]" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docker-compose.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docker-compose.yml" />
              <option name="originalContent" value="services:&#10;  mysql:&#10;    image: mysql:8.0.39&#10;    container_name: mysql&#10;    restart: always&#10;    environment:&#10;      MYSQL_ROOT_PASSWORD:&#10;      MYSQL_DATABASE: ticketing&#10;    ports:&#10;      - &quot;3306:3306&quot;&#10;    volumes:&#10;      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql&#10;      - db-data:/var/lib/mysql&#10;      - db-data:/var/log/mysql&#10;&#10;&#10;&#10;  zookeeper:&#10;    image: confluentinc/cp-zookeeper:7.5.0&#10;    hostname: zookeeper&#10;    container_name: zookeeper&#10;    ports:&#10;      - &quot;2181:2181&quot;&#10;    environment:&#10;      ZOOKEEPER_CLIENT_PORT: 2181&#10;      ZOOKEEPER_TICK_TIME: 3000&#10;&#10;  kafka-broker:&#10;    image: confluentinc/cp-kafka:7.5.0&#10;    container_name: kafka-broker&#10;    ports:&#10;      - &quot;9092:9092&quot;&#10;      - &quot;29092:29092&quot;&#10;    depends_on:&#10;      - zookeeper&#10;    environment:&#10;      KAFKA_BROKER_ID: 1&#10;      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'&#10;      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT&#10;      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:29092,PLAINTEXT_HOST://localhost:9092&#10;      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1&#10;      auto.create.topics.enable: 'true'&#10;&#10;  kafka-ui:&#10;    container_name: kafka-ui&#10;    image: provectuslabs/kafka-ui:latest&#10;    ports:&#10;      - &quot;8084:8080&quot;&#10;    depends_on:&#10;      - kafka-broker&#10;    environment:&#10;      KAFKA_CLUSTERS_NAME: local&#10;      KAFKA_CLUSTERS_BOOTSTRAPSERVERS: kafka-broker:29092&#10;      DYNAMIC_CONFIG_ENABLED: 'true'&#10;&#10;  kafka-schema-registry:&#10;    image: confluentinc/cp-schema-registry:7.5.0&#10;    hostname: kafka-schema-registry&#10;    container_name: kafka-schema-registry&#10;    depends_on:&#10;      - kafka-broker&#10;    ports:&#10;      - &quot;8083:8081&quot;&#10;    environment:&#10;      SCHEMA_REGISTRY_HOST_NAME: kafka-schema-registry&#10;      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka-broker:29092'&#10;      SCHEMA_REGISTRY_LISTENERS: http://kafka-schema-registry:8081&#10;&#10;  keycloak-db:&#10;    container_name: keycloak-mysql&#10;    image: mysql:8.3.0&#10;    volumes:&#10;      - ./volume-data/mysql_keycloak_data:/var/lib/mysql&#10;    environment:&#10;      MYSQL_ROOT_PASSWORD: root&#10;      MYSQL_DATABASE: keycloak&#10;      MYSQL_USER: keycloak&#10;      MYSQL_PASSWORD:  # make sure to add your password&#10;&#10;  keycloak:&#10;    container_name: keycloak&#10;    image: quay.io/keycloak/keycloak:24.0.1&#10;    command: [ &quot;start-dev&quot;, &quot;--import-realm&quot; ]&#10;    environment:&#10;      DB_VENDOR: MYSQL&#10;      DB_ADDR: mysql&#10;      DB_DATABASE: keycloak&#10;      DB_USER: keycloak&#10;      DB_PASSWORD: password&#10;      KEYCLOAK_ADMIN: admin&#10;      KEYCLOAK_ADMIN_PASSWORD: admin&#10;    ports:&#10;      - &quot;8091:8080&quot;&#10;    volumes:&#10;      - ./docker/keycloak/realms/:/opt/keycloak/data/import/&#10;    depends_on:&#10;      - keycloak-db&#10;&#10;  jenkins:&#10;    container_name: jenkins&#10;    build:&#10;      context: .&#10;      dockerfile: jenkins.Dockerfile&#10;    restart: always&#10;    ports:&#10;      - &quot;8081:8080&quot;&#10;      - &quot;50000:50000&quot;&#10;    volumes:&#10;      - jenkins-data:/var/jenkins_home&#10;      - /var/run/docker.sock:/var/run/docker.sock&#10;      - ./:/workspace&#10;    environment:&#10;    command: &gt;&#10;      bash -c &quot;&#10;        apt-get update &amp;&amp;&#10;        apt-get install -y docker.io awscli maven &amp;&amp;&#10;        usermod -aG docker jenkins &amp;&amp;&#10;        /usr/local/bin/jenkins.sh&#10;      &quot;&#10;      - DOCKER_HOST=unix:///var/run/docker.sock&#10;&#10;volumes:&#10;  db-data:&#10;  jenkins-data:&#10;  docker-certs-ca:&#10;  docker-certs-client:&#10;" />
              <option name="updatedContent" value="services:&#10;  mysql:&#10;    image: mysql:8.0.39&#10;    container_name: mysql&#10;    restart: always&#10;    environment:&#10;      MYSQL_ROOT_PASSWORD:&#10;      MYSQL_DATABASE: ticketing&#10;    ports:&#10;      - &quot;3306:3306&quot;&#10;    volumes:&#10;      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql&#10;      - db-data:/var/lib/mysql&#10;      - db-data:/var/log/mysql&#10;&#10;&#10;&#10;  zookeeper:&#10;    image: confluentinc/cp-zookeeper:7.5.0&#10;    hostname: zookeeper&#10;    container_name: zookeeper&#10;    ports:&#10;      - &quot;2181:2181&quot;&#10;    environment:&#10;      ZOOKEEPER_CLIENT_PORT: 2181&#10;      ZOOKEEPER_TICK_TIME: 3000&#10;&#10;  kafka-broker:&#10;    image: confluentinc/cp-kafka:7.5.0&#10;    container_name: kafka-broker&#10;    ports:&#10;      - &quot;9092:9092&quot;&#10;      - &quot;29092:29092&quot;&#10;    depends_on:&#10;      - zookeeper&#10;    environment:&#10;      KAFKA_BROKER_ID: 1&#10;      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'&#10;      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT&#10;      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:29092,PLAINTEXT_HOST://localhost:9092&#10;      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1&#10;      auto.create.topics.enable: 'true'&#10;&#10;  kafka-ui:&#10;    container_name: kafka-ui&#10;    image: provectuslabs/kafka-ui:latest&#10;    ports:&#10;      - &quot;8084:8080&quot;&#10;    depends_on:&#10;      - kafka-broker&#10;    environment:&#10;      KAFKA_CLUSTERS_NAME: local&#10;      KAFKA_CLUSTERS_BOOTSTRAPSERVERS: kafka-broker:29092&#10;      DYNAMIC_CONFIG_ENABLED: 'true'&#10;&#10;  kafka-schema-registry:&#10;    image: confluentinc/cp-schema-registry:7.5.0&#10;    hostname: kafka-schema-registry&#10;    container_name: kafka-schema-registry&#10;    depends_on:&#10;      - kafka-broker&#10;    ports:&#10;      - &quot;8083:8081&quot;&#10;    environment:&#10;      SCHEMA_REGISTRY_HOST_NAME: kafka-schema-registry&#10;      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka-broker:29092'&#10;      SCHEMA_REGISTRY_LISTENERS: http://kafka-schema-registry:8081&#10;&#10;  keycloak-db:&#10;    container_name: keycloak-mysql&#10;    image: mysql:8.3.0&#10;    volumes:&#10;      - ./volume-data/mysql_keycloak_data:/var/lib/mysql&#10;    environment:&#10;      MYSQL_ROOT_PASSWORD: root&#10;      MYSQL_DATABASE: keycloak&#10;      MYSQL_USER: keycloak&#10;      MYSQL_PASSWORD:  # make sure to add your password&#10;&#10;  keycloak:&#10;    container_name: keycloak&#10;    image: quay.io/keycloak/keycloak:24.0.1&#10;    command: [ &quot;start-dev&quot;, &quot;--import-realm&quot; ]&#10;    environment:&#10;      DB_VENDOR: MYSQL&#10;      DB_ADDR: mysql&#10;      DB_DATABASE: keycloak&#10;      DB_USER: keycloak&#10;      DB_PASSWORD: password&#10;      KEYCLOAK_ADMIN: admin&#10;      KEYCLOAK_ADMIN_PASSWORD: admin&#10;    ports:&#10;      - &quot;8091:8080&quot;&#10;    volumes:&#10;      - ./docker/keycloak/realms/:/opt/keycloak/data/import/&#10;    depends_on:&#10;      - keycloak-db&#10;&#10;  jenkins:&#10;    container_name: jenkins&#10;    user: root&#10;    build:&#10;      context: .&#10;      dockerfile: jenkins.Dockerfile&#10;    restart: always&#10;    ports:&#10;      - &quot;8081:8080&quot;&#10;      - &quot;50000:50000&quot;&#10;    volumes:&#10;      - jenkins-data:/var/jenkins_home&#10;      - /var/run/docker.sock:/var/run/docker.sock&#10;      - ./:/workspace&#10;    environment:&#10;      - DOCKER_HOST=unix:///var/run/docker.sock&#10;&#10;volumes:&#10;  db-data:&#10;  jenkins-data:" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/inventoryservice/Dockerfile">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/inventoryservice/Dockerfile" />
              <option name="updatedContent" value="FROM openjdk:17-jdk-slim&#10;&#10;WORKDIR /app&#10;&#10;# Copy the JAR file&#10;COPY target/inventoryservice-*.jar app.jar&#10;&#10;# Expose the port your application runs on&#10;EXPOSE 8082&#10;&#10;# Run the application&#10;ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;app.jar&quot;]" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/jenkins.Dockerfile">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/jenkins.Dockerfile" />
              <option name="originalContent" value="FROM jenkins/jenkins:lts&#10;&#10;USER root&#10;&#10;# Install Docker, AWS CLI, and Maven&#10;RUN apt-get update &amp;&amp; \&#10;    apt-get install -y \&#10;    docker.io \&#10;    awscli \&#10;    maven \&#10;    &amp;&amp; rm -rf /var/lib/apt/lists/*&#10;&#10;# Add jenkins user to docker group&#10;RUN usermod -aG docker jenkins&#10;&#10;# Fix volume permissions for Windows&#10;RUN chown -R jenkins:jenkins /var/jenkins_home &amp;&amp; \&#10;    chmod -R 755 /var/jenkins_home&#10;&#10;USER jenkins&#10;" />
              <option name="updatedContent" value="FROM jenkins/jenkins:lts&#10;&#10;USER root&#10;&#10;# Install Docker CLI + Maven + curl (simplified)&#10;RUN apt-get update &amp;&amp; apt-get install -y docker.io maven curl &amp;&amp; rm -rf /var/lib/apt/lists/*&#10;&#10;# Add jenkins user to docker group&#10;RUN usermod -aG docker jenkins&#10;&#10;# (Optional) Pre-create home (ownership will also be fixed at runtime entrypoint)&#10;RUN mkdir -p /var/jenkins_home &amp;&amp; chown -R jenkins:jenkins /var/jenkins_home&#10;&#10;# Minimal plugins only (docker pipeline + workflow + git)&#10;COPY plugins.txt /usr/share/jenkins/ref/plugins.txt&#10;RUN jenkins-plugin-cli --plugin-file /usr/share/jenkins/ref/plugins.txt || true&#10;&#10;# Runtime entrypoint will fix volume permissions before starting Jenkins&#10;ENTRYPOINT [&quot;/bin/sh&quot;,&quot;-c&quot;,&quot;chown -R 1000:1000 /var/jenkins_home &amp;&amp; exec /usr/bin/tini -- /usr/local/bin/jenkins.sh&quot;]&#10;&#10;USER jenkins" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/orderservice/Dockerfile">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/orderservice/Dockerfile" />
              <option name="updatedContent" value="FROM openjdk:17-jdk-slim&#10;&#10;WORKDIR /app&#10;&#10;# Copy the JAR file&#10;COPY target/orderservice-*.jar app.jar&#10;&#10;# Expose the port your application runs on&#10;EXPOSE 8083&#10;&#10;# Run the application&#10;ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;app.jar&quot;]" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/plugins.txt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/plugins.txt" />
              <option name="originalContent" value="&#10;&#10;" />
              <option name="updatedContent" value="blueocean&#10;docker-workflow&#10;git&#10;workflow-aggregator&#10;amazon-ecr&#10;aws-credentials&#10;pipeline-aws&#10;maven-plugin&#10;junit" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/terraform/main.tf">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/terraform/main.tf" />
              <option name="updatedContent" value="provider &quot;aws&quot; {&#10;  region = &quot;eu-west-2&quot;&#10;}&#10;&#10;# ECR Repositories for each microservice&#10;resource &quot;aws_ecr_repository&quot; &quot;apigateway&quot; {&#10;  name                 = &quot;apigateway&quot;&#10;  image_tag_mutability = &quot;MUTABLE&quot;&#10;&#10;  image_scanning_configuration {&#10;    scan_on_push = true&#10;  }&#10;}&#10;&#10;resource &quot;aws_ecr_repository&quot; &quot;bookingservice&quot; {&#10;  name                 = &quot;bookingservice&quot;&#10;  image_tag_mutability = &quot;MUTABLE&quot;&#10;&#10;  image_scanning_configuration {&#10;    scan_on_push = true&#10;  }&#10;}&#10;&#10;resource &quot;aws_ecr_repository&quot; &quot;inventoryservice&quot; {&#10;  name                 = &quot;inventoryservice&quot;&#10;  image_tag_mutability = &quot;MUTABLE&quot;&#10;&#10;  image_scanning_configuration {&#10;    scan_on_push = true&#10;  }&#10;}&#10;&#10;resource &quot;aws_ecr_repository&quot; &quot;orderservice&quot; {&#10;  name                 = &quot;orderservice&quot;&#10;  image_tag_mutability = &quot;MUTABLE&quot;&#10;&#10;  image_scanning_configuration {&#10;    scan_on_push = true&#10;  }&#10;}&#10;&#10;# VPC and Networking&#10;resource &quot;aws_vpc&quot; &quot;main&quot; {&#10;  cidr_block           = &quot;10.0.0.0/16&quot;&#10;  enable_dns_hostnames = true&#10;  enable_dns_support   = true&#10;&#10;  tags = {&#10;    Name = &quot;microservices-vpc&quot;&#10;  }&#10;}&#10;&#10;resource &quot;aws_internet_gateway&quot; &quot;main&quot; {&#10;  vpc_id = aws_vpc.main.id&#10;&#10;  tags = {&#10;    Name = &quot;microservices-igw&quot;&#10;  }&#10;}&#10;&#10;resource &quot;aws_subnet&quot; &quot;public&quot; {&#10;  count             = 2&#10;  vpc_id            = aws_vpc.main.id&#10;  cidr_block        = &quot;10.0.${count.index + 1}.0/24&quot;&#10;  availability_zone = data.aws_availability_zones.available.names[count.index]&#10;&#10;  map_public_ip_on_launch = true&#10;&#10;  tags = {&#10;    Name = &quot;public-subnet-${count.index + 1}&quot;&#10;  }&#10;}&#10;&#10;resource &quot;aws_route_table&quot; &quot;public&quot; {&#10;  vpc_id = aws_vpc.main.id&#10;&#10;  route {&#10;    cidr_block = &quot;0.0.0.0/0&quot;&#10;    gateway_id = aws_internet_gateway.main.id&#10;  }&#10;&#10;  tags = {&#10;    Name = &quot;public-route-table&quot;&#10;  }&#10;}&#10;&#10;resource &quot;aws_route_table_association&quot; &quot;public&quot; {&#10;  count          = 2&#10;  subnet_id      = aws_subnet.public[count.index].id&#10;  route_table_id = aws_route_table.public.id&#10;}&#10;&#10;data &quot;aws_availability_zones&quot; &quot;available&quot; {&#10;  state = &quot;available&quot;&#10;}&#10;&#10;# Security Group&#10;resource &quot;aws_security_group&quot; &quot;ecs_tasks&quot; {&#10;  name_prefix = &quot;ecs-tasks-sg&quot;&#10;  vpc_id      = aws_vpc.main.id&#10;&#10;  ingress {&#10;    protocol    = &quot;tcp&quot;&#10;    from_port   = 80&#10;    to_port     = 80&#10;    cidr_blocks = [&quot;0.0.0.0/0&quot;]&#10;  }&#10;&#10;  ingress {&#10;    protocol    = &quot;tcp&quot;&#10;    from_port   = 8080&#10;    to_port     = 8080&#10;    cidr_blocks = [&quot;0.0.0.0/0&quot;]&#10;  }&#10;&#10;  egress {&#10;    protocol    = &quot;-1&quot;&#10;    from_port   = 0&#10;    to_port     = 0&#10;    cidr_blocks = [&quot;0.0.0.0/0&quot;]&#10;  }&#10;}&#10;&#10;# ECS Cluster&#10;resource &quot;aws_ecs_cluster&quot; &quot;microservices&quot; {&#10;  name = &quot;microservices-cluster&quot;&#10;&#10;  setting {&#10;    name  = &quot;containerInsights&quot;&#10;    value = &quot;enabled&quot;&#10;  }&#10;}&#10;&#10;# IAM Role for ECS Tasks&#10;resource &quot;aws_iam_role&quot; &quot;ecs_task_execution_role&quot; {&#10;  name = &quot;ecsTaskExecutionRole&quot;&#10;&#10;  assume_role_policy = jsonencode({&#10;    Version = &quot;2012-10-17&quot;&#10;    Statement = [&#10;      {&#10;        Action = &quot;sts:AssumeRole&quot;&#10;        Effect = &quot;Allow&quot;&#10;        Sid    = &quot;&quot;&#10;        Principal = {&#10;          Service = &quot;ecs-tasks.amazonaws.com&quot;&#10;        }&#10;      },&#10;    ]&#10;  })&#10;}&#10;&#10;resource &quot;aws_iam_role_policy_attachment&quot; &quot;ecs_task_execution_role_policy&quot; {&#10;  role       = aws_iam_role.ecs_task_execution_role.name&#10;  policy_arn = &quot;arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy&quot;&#10;}&#10;&#10;# Application Load Balancer&#10;resource &quot;aws_lb&quot; &quot;main&quot; {&#10;  name               = &quot;microservices-alb&quot;&#10;  internal           = false&#10;  load_balancer_type = &quot;application&quot;&#10;  security_groups    = [aws_security_group.ecs_tasks.id]&#10;  subnets            = aws_subnet.public[*].id&#10;&#10;  enable_deletion_protection = false&#10;}&#10;&#10;resource &quot;aws_lb_target_group&quot; &quot;apigateway&quot; {&#10;  name     = &quot;apigateway-tg&quot;&#10;  port     = 8080&#10;  protocol = &quot;HTTP&quot;&#10;  vpc_id   = aws_vpc.main.id&#10;  target_type = &quot;ip&quot;&#10;&#10;  health_check {&#10;    enabled             = true&#10;    healthy_threshold   = &quot;3&quot;&#10;    interval            = &quot;30&quot;&#10;    matcher             = &quot;200&quot;&#10;    path                = &quot;/actuator/health&quot;&#10;    port                = &quot;traffic-port&quot;&#10;    protocol            = &quot;HTTP&quot;&#10;    timeout             = &quot;5&quot;&#10;    unhealthy_threshold = &quot;2&quot;&#10;  }&#10;}&#10;&#10;resource &quot;aws_lb_listener&quot; &quot;front_end&quot; {&#10;  load_balancer_arn = aws_lb.main.arn&#10;  port              = &quot;80&quot;&#10;  protocol          = &quot;HTTP&quot;&#10;&#10;  default_action {&#10;    type             = &quot;forward&quot;&#10;    target_group_arn = aws_lb_target_group.apigateway.arn&#10;  }&#10;}&#10;&#10;# ECS Task Definitions&#10;resource &quot;aws_ecs_task_definition&quot; &quot;apigateway&quot; {&#10;  family                   = &quot;apigateway&quot;&#10;  network_mode             = &quot;awsvpc&quot;&#10;  requires_compatibilities = [&quot;FARGATE&quot;]&#10;  cpu                      = &quot;256&quot;&#10;  memory                   = &quot;512&quot;&#10;  execution_role_arn       = aws_iam_role.ecs_task_execution_role.arn&#10;&#10;  container_definitions = jsonencode([&#10;    {&#10;      name      = &quot;apigateway&quot;&#10;      image     = &quot;${aws_ecr_repository.apigateway.repository_url}:latest&quot;&#10;      essential = true&#10;      portMappings = [&#10;        {&#10;          containerPort = 8080&#10;          hostPort      = 8080&#10;        }&#10;      ]&#10;      logConfiguration = {&#10;        logDriver = &quot;awslogs&quot;&#10;        options = {&#10;          awslogs-group         = &quot;/ecs/apigateway&quot;&#10;          awslogs-region        = &quot;eu-west-2&quot;&#10;          awslogs-stream-prefix = &quot;ecs&quot;&#10;        }&#10;      }&#10;    }&#10;  ])&#10;}&#10;&#10;resource &quot;aws_ecs_task_definition&quot; &quot;bookingservice&quot; {&#10;  family                   = &quot;bookingservice&quot;&#10;  network_mode             = &quot;awsvpc&quot;&#10;  requires_compatibilities = [&quot;FARGATE&quot;]&#10;  cpu                      = &quot;256&quot;&#10;  memory                   = &quot;512&quot;&#10;  execution_role_arn       = aws_iam_role.ecs_task_execution_role.arn&#10;&#10;  container_definitions = jsonencode([&#10;    {&#10;      name      = &quot;bookingservice&quot;&#10;      image     = &quot;${aws_ecr_repository.bookingservice.repository_url}:latest&quot;&#10;      essential = true&#10;      portMappings = [&#10;        {&#10;          containerPort = 8080&#10;          hostPort      = 8080&#10;        }&#10;      ]&#10;      logConfiguration = {&#10;        logDriver = &quot;awslogs&quot;&#10;        options = {&#10;          awslogs-group         = &quot;/ecs/bookingservice&quot;&#10;          awslogs-region        = &quot;eu-west-2&quot;&#10;          awslogs-stream-prefix = &quot;ecs&quot;&#10;        }&#10;      }&#10;    }&#10;  ])&#10;}&#10;&#10;resource &quot;aws_ecs_task_definition&quot; &quot;inventoryservice&quot; {&#10;  family                   = &quot;inventoryservice&quot;&#10;  network_mode             = &quot;awsvpc&quot;&#10;  requires_compatibilities = [&quot;FARGATE&quot;]&#10;  cpu                      = &quot;256&quot;&#10;  memory                   = &quot;512&quot;&#10;  execution_role_arn       = aws_iam_role.ecs_task_execution_role.arn&#10;&#10;  container_definitions = jsonencode([&#10;    {&#10;      name      = &quot;inventoryservice&quot;&#10;      image     = &quot;${aws_ecr_repository.inventoryservice.repository_url}:latest&quot;&#10;      essential = true&#10;      portMappings = [&#10;        {&#10;          containerPort = 8080&#10;          hostPort      = 8080&#10;        }&#10;      ]&#10;      logConfiguration = {&#10;        logDriver = &quot;awslogs&quot;&#10;        options = {&#10;          awslogs-group         = &quot;/ecs/inventoryservice&quot;&#10;          awslogs-region        = &quot;eu-west-2&quot;&#10;          awslogs-stream-prefix = &quot;ecs&quot;&#10;        }&#10;      }&#10;    }&#10;  ])&#10;}&#10;&#10;resource &quot;aws_ecs_task_definition&quot; &quot;orderservice&quot; {&#10;  family                   = &quot;orderservice&quot;&#10;  network_mode             = &quot;awsvpc&quot;&#10;  requires_compatibilities = [&quot;FARGATE&quot;]&#10;  cpu                      = &quot;256&quot;&#10;  memory                   = &quot;512&quot;&#10;  execution_role_arn       = aws_iam_role.ecs_task_execution_role.arn&#10;&#10;  container_definitions = jsonencode([&#10;    {&#10;      name      = &quot;orderservice&quot;&#10;      image     = &quot;${aws_ecr_repository.orderservice.repository_url}:latest&quot;&#10;      essential = true&#10;      portMappings = [&#10;        {&#10;          containerPort = 8080&#10;          hostPort      = 8080&#10;        }&#10;      ]&#10;      logConfiguration = {&#10;        logDriver = &quot;awslogs&quot;&#10;        options = {&#10;          awslogs-group         = &quot;/ecs/orderservice&quot;&#10;          awslogs-region        = &quot;eu-west-2&quot;&#10;          awslogs-stream-prefix = &quot;ecs&quot;&#10;        }&#10;      }&#10;    }&#10;  ])&#10;}&#10;&#10;# CloudWatch Log Groups&#10;resource &quot;aws_cloudwatch_log_group&quot; &quot;apigateway&quot; {&#10;  name              = &quot;/ecs/apigateway&quot;&#10;  retention_in_days = 30&#10;}&#10;&#10;resource &quot;aws_cloudwatch_log_group&quot; &quot;bookingservice&quot; {&#10;  name              = &quot;/ecs/bookingservice&quot;&#10;  retention_in_days = 30&#10;}&#10;&#10;resource &quot;aws_cloudwatch_log_group&quot; &quot;inventoryservice&quot; {&#10;  name              = &quot;/ecs/inventoryservice&quot;&#10;  retention_in_days = 30&#10;}&#10;&#10;resource &quot;aws_cloudwatch_log_group&quot; &quot;orderservice&quot; {&#10;  name              = &quot;/ecs/orderservice&quot;&#10;  retention_in_days = 30&#10;}&#10;&#10;# ECS Services&#10;resource &quot;aws_ecs_service&quot; &quot;apigateway&quot; {&#10;  name            = &quot;apigateway-service&quot;&#10;  cluster         = aws_ecs_cluster.microservices.id&#10;  task_definition = aws_ecs_task_definition.apigateway.arn&#10;  desired_count   = 1&#10;  launch_type     = &quot;FARGATE&quot;&#10;&#10;  network_configuration {&#10;    subnets          = aws_subnet.public[*].id&#10;    security_groups  = [aws_security_group.ecs_tasks.id]&#10;    assign_public_ip = true&#10;  }&#10;&#10;  load_balancer {&#10;    target_group_arn = aws_lb_target_group.apigateway.arn&#10;    container_name   = &quot;apigateway&quot;&#10;    container_port   = 8080&#10;  }&#10;&#10;  depends_on = [aws_lb_listener.front_end]&#10;}&#10;&#10;resource &quot;aws_ecs_service&quot; &quot;bookingservice&quot; {&#10;  name            = &quot;bookingservice-service&quot;&#10;  cluster         = aws_ecs_cluster.microservices.id&#10;  task_definition = aws_ecs_task_definition.bookingservice.arn&#10;  desired_count   = 1&#10;  launch_type     = &quot;FARGATE&quot;&#10;&#10;  network_configuration {&#10;    subnets          = aws_subnet.public[*].id&#10;    security_groups  = [aws_security_group.ecs_tasks.id]&#10;    assign_public_ip = true&#10;  }&#10;}&#10;&#10;resource &quot;aws_ecs_service&quot; &quot;inventoryservice&quot; {&#10;  name            = &quot;inventoryservice-service&quot;&#10;  cluster         = aws_ecs_cluster.microservices.id&#10;  task_definition = aws_ecs_task_definition.inventoryservice.arn&#10;  desired_count   = 1&#10;  launch_type     = &quot;FARGATE&quot;&#10;&#10;  network_configuration {&#10;    subnets          = aws_subnet.public[*].id&#10;    security_groups  = [aws_security_group.ecs_tasks.id]&#10;    assign_public_ip = true&#10;  }&#10;}&#10;&#10;resource &quot;aws_ecs_service&quot; &quot;orderservice&quot; {&#10;  name            = &quot;orderservice-service&quot;&#10;  cluster         = aws_ecs_cluster.microservices.id&#10;  task_definition = aws_ecs_task_definition.orderservice.arn&#10;  desired_count   = 1&#10;  launch_type     = &quot;FARGATE&quot;&#10;&#10;  network_configuration {&#10;    subnets          = aws_subnet.public[*].id&#10;    security_groups  = [aws_security_group.ecs_tasks.id]&#10;    assign_public_ip = true&#10;  }&#10;}&#10;&#10;# Outputs&#10;output &quot;ecr_repositories&quot; {&#10;  value = {&#10;    apigateway      = aws_ecr_repository.apigateway.repository_url&#10;    bookingservice  = aws_ecr_repository.bookingservice.repository_url&#10;    inventoryservice = aws_ecr_repository.inventoryservice.repository_url&#10;    orderservice    = aws_ecr_repository.orderservice.repository_url&#10;  }&#10;}&#10;&#10;output &quot;load_balancer_dns&quot; {&#10;  value = aws_lb.main.dns_name&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>